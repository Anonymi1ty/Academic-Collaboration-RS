{"id": "50/8499-1", "name": "Haoyu Wang 0001", "Article": {"conf/icse/YangW00YX22": {"title": "DescribeCtx: Context-Aware Description Synthesis for Sensitive Behaviors in Mobile Apps.", "url": "https://doi.org/10.1145/3510003.3510058", "year": "2022", "author": {"Shao Yang": "141/0090", "Yuehan Wang": "162/8078", "Yuan Yao 0001": "25/4120-1", "Haoyu Wang 0001": "50/8499-1", "Yanfang Fanny Ye": "288/7963", "Xusheng Xiao": "13/9656"}, "abstract": "\n\t\tWhile mobile applications (i.e., apps) are becoming capable of handling various needs from users, their increasing access to sensitive data raises privacy concerns. To inform such sensitive behaviors to users, existing techniques propose to automatically identify explanatory sentences from app descriptions; however, many sensitive behaviors are not explained in the corresponding app descriptions. There also exist general techniques that translate code to sentences. However, these techniques lack the vocabulary to explain the uses of sensitive data and fail to consider the context (i.e., the app functionalities) of the sensitive behaviors. To address these limitations, we propose DescribeCtx, a context-aware description synthesis approach that trains a neural machine translation model using a large set of popular apps, and generates app-specific descriptions for sensitive behaviors. Specifically, DescribeCtx encodes three heterogeneous sources as input, i.e., vocabularies provided by privacy policies, behavior summary provided by the call graphs in code, and contextual information provided by GUI texts. Our evaluations on 1,262 Android apps show that, compared with existing baselines, DescribeCtx produces more accurate descriptions (24.96 in BLEU) and achieves higher user ratings with respect to the reference sentences manually identified in the app descriptions.\n\t"}, "conf/issta/ChengZ0S22": {"title": "Path-sensitive code embedding via contrastive learning for software vulnerability detection.", "url": "https://doi.org/10.1145/3533767.3534371", "year": "2022", "author": {"Xiao Cheng": "73/1713", "Guanqin Zhang": "280/5620", "Haoyu Wang 0001": "50/8499-1", "Yulei Sui": "58/10567"}, "abstract": "\n\t\tMachine learning and its promising branch deep learning have shown success in a wide range of application domains. Recently, much effort has been expended on applying deep learning techniques (e.g., graph neural networks) to static vulnerability detection as an alternative to conventional bug detection methods. To obtain the structural information of code, current learning approaches typically abstract a program in the form of graphs (e.g., data-flow graphs, abstract syntax trees), and then train an underlying classification model based on the (sub)graphs of safe and vulnerable code fragments for vulnerability prediction. However, these models are still insufficient for precise bug detection, because the objective of these models is to produce classification results rather than comprehending the semantics of vulnerabilities, e.g., pinpoint bug triggering paths, which are essential for static bug detection. This paper presents ContraFlow, a selective yet precise contrastive value-flow embedding approach to statically detect software vulnerabilities. The novelty of ContraFlow lies in selecting and preserving feasible value-flow (aka program dependence) paths through a pretrained path embedding model using self-supervised contrastive learning, thus significantly reducing the amount of labeled data required for training expensive downstream models for path-based vulnerability detection. We evaluated ContraFlow using 288 real-world projects by comparing eight recent learning-based approaches. ContraFlow outperforms these eight baselines by up to 334.1%, 317.9%, 58.3% for informedness, markedness and F1 Score, and achieves up to 450.0%, 192.3%, 450.0% improvement for mean statement recall, mean statement precision and mean IoU respectively in terms of locating buggy statements.\n\t"}, "conf/mobilesoft/WangWWTL22": {"title": "A Tale of Two Countries: A Longitudinal Cross-Country Study of Mobile Users' Reactions to the COVID-19 Pandemic Through the Lens of App Popularity.", "url": "https://doi.org/10.1145/3524613.3527818", "year": "2022", "author": {"Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1", "Yi Wang": "17/221", "Gareth Tyson": "85/85", "Fei Lyu 0001": "86/7981"}, "abstract": ""}, "conf/sigmetrics/WangWHTMLL22": {"title": "MalRadar: Demystifying Android Malware in the New Era.", "url": "https://doi.org/10.1145/3489048.3530973", "year": "2022", "author": {"Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1", "Ren He": "40/713", "Ran Tao": "99/955", "Guozhu Meng": "134/8681", "Xiapu Luo": "53/1565", "Xuanzhe Liu": "08/2161"}, "abstract": "\n\t\tA reliable and up-to-date malware dataset is critical to evaluate the effectiveness of malware detection approaches. Although there are several widely-used malware benchmarks in our community (e.g., MalGenome, Drebin, Piggybacking and AMD, etc.), these benchmarks face several limitations including out-of-date, size, coverage, and reliability issues, etc. In this paper, we first make effort to create MalRadar, a growing and up-to-date Android malware dataset using the most reliable way, i.e., by collecting malware based on the analysis reports of security experts. We have crawled all the mobile security related reports released by ten leading security companies, and used an automated approach to extract and label the useful ones describing new Android malware and containing Indicators of Compromise (IoC) information. We have successfully compiled MalRadar, a dataset that contains 4,534 unique Android malware samples (including both apks and metadata) released from 2014 to April 2021 by the time of this paper, all of which were manually verified by security experts with detailed behavior analysis. Then we characterize the MalRadar dataset from malware distribution channels, app installation methods, malware activation, malicious behaviors and anti-analysis techniques. We further investigate the malware evolution over the last decade. At last, we measure the effectiveness of commercial anti-virus engines and malware detection techniques on detecting malware in MalRadar. Our dataset can be served as the representative Android malware benchmark in the new era, and our observations can positively contribute to the community and boost a series of studies on mobile security.\n\t"}, "conf/sigmetrics/XiaWGSYLZXX22": {"title": "Trade or Trick?: Detecting and Characterizing Scam Tokens on Uniswap Decentralized Exchange.", "url": "https://doi.org/10.1145/3489048.3522636", "year": "2022", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Bingyu Gao": "260/6730", "Weihang Su": "301/7966", "Zhou Yu": "83/3205", "Xiapu Luo": "53/1565", "Chao Zhang 0008": "94/3019-8", "Xusheng Xiao": "13/9656", "Guoai Xu": "76/10013"}, "abstract": "\n\t\tThe prosperity of the cryptocurrency ecosystem drives the need for digital asset trading platforms. Uniswap, as the most prominent cryptocurrency decentralized exchange (DEX), is continuing to attract scammers, with fraudulent cryptocurrencies flooding in the ecosystem. In this paper, we take the first step to detect and characterize scam tokens on Uniswap. We first investigate the landscape of cryptocurrency trading on Uniswap from different perspectives based on its transactions. Then, we propose an accurate approach for flagging scam tokens on Uniswap. We have identified over 10K scam tokens listed on Uniswap, which suggests that roughly 50% of the tokens listed on Uniswap are scam tokens. All the scam tokens are created specialized for the \"rug pull\" scams, and some scam tokens have embedded tricks and backdoors in the smart contracts. We further observe that thousands of collusion addresses help carry out the scams. The scammers have gained a profit of at least $16 million from 39,762 potential victims. Our observations in this paper suggest the urgency to identify and stop scams in the decentralized finance ecosystem.\n\t"}, "conf/www/XuLZLTLLXXW22": {"title": "Lie to Me: Abusing the Mobile Content Sharing Service for Fun and Profit.", "url": "https://doi.org/10.1145/3485447.3512151", "year": "2022", "author": {"Guosheng Xu": "130/0993", "Siyi Li": "96/10161", "Hao Zhou": "63/778", "Shucen Liu": "318/9645", "Yutian Tang": "120/1174", "Li Li 0029": "53/2189-29", "Xiapu Luo": "53/1565", "Xusheng Xiao": "13/9656", "Guoai Xu": "76/10013", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "\n\t\t Online content sharing is a widely used feature in Android apps. In this paper, we observe a new Fake-Share attack that adversaries can abuse existing content sharing services to manipulate the displayed source of shared content to bypass the content review of targeted Online Social Apps (OSAs) and induce users to click on the shared fraudulent content. We show that seven popular content-sharing services (including WeChat, AliPay, and KakaoTalk) are vulnerable to such an attack. To detect this kind of attack and explore whether adversaries have leveraged it in the wild, we propose DeFash, a multi-granularity detection tool including static analysis and dynamic verification. The extensive in-the-lab and in-the-wild experiments demonstrate that DeFash is effective in detecting such attacks. We have identified 51 real-world apps involved in Fake-Share attacks. We have further harvested over 24K Sharing Identification Information (SIIs) that can be abused by attackers. It is hence urgent for our community to take actions to detect and mitigate this kind of attack.\n\t"}, "conf/codaspy/XiaNK0Y21": {"title": "Identifying and Characterizing COVID-19 Themed Malicious Domain Campaigns.", "url": "https://doi.org/10.1145/3422337.3447840", "year": "2021", "author": {"Pengcheng Xia": "197/8181", "Mohamed Nabeel": "65/4357", "Issa Khalil": "115/8715", "Haoyu Wang 0001": "50/8499-1", "Ting Yu 0001": "y/TingYu-1"}, "abstract": "\n\t\tEver since the beginning of the outbreak of the COVID-19 pandemic, attackers acted quickly to exploit the confusion, uncertainty and anxiety caused by the pandemic and launched various attacks through COVID-19 themed malicious domains. Malicious domains are rarely deployed independently, but rather almost always belong to much bigger and coordinated attack campaigns. Thus, analyzing COVID-themed malicious domains from the angle of attack campaigns would help us gain a deeper understanding of the scale, scope and sophistication of the threats imposed by such malicious domains. In this paper, we collect data from multiple sources, and identify and characterize COVID-themed malicious domain campaigns, including the evolution of such campaigns, their underlying infrastructures and the different strategies taken by attackers behind these campaigns. Our exploration suggests that some malicious domains have strong correlations, which can guide us to identify new malicious domains and raise alarms at the early stage of their deployment. The results shed light on the emergency for detecting and mitigating public event related cyber attacks.\n\t"}, "conf/compsac/WangLZBW21": {"title": "A Large-Scale Empirical Study of COVID-19 Themed GitHub Repositories.", "url": "https://doi.org/10.1109/COMPSAC51774.2021.00124", "year": "2021", "author": {"Liu Wang 0002": "10/3099-2", "Ruiqing Li": "246/6396", "Jiaxin Zhu": "150/8816", "Guangdong Bai": "86/9673", "Haoyu Wang 0001": "50/8499-1"}, "abstract": " Abstract:Ever since the beginning of the outbreak of the COVID-19 pandemic, researchers from interdisciplinary domains have worked together to fight against the crisis. The open source community, plays a vital role in coping with the pandemic which is inherently a collaborative process. Plenty of COVID-19 related datasets, tools, software, deep learning models, are created and shared in research communities with great efforts. However, COVID-19 themed open source projects have not been systematically studied, and we are still unaware how the open source community helps combat COVID-19 in practice. To fill this void, in this paper, we take the first step to study COVID-19 themed repositories in GitHub, one of the most popular collaborative platforms. We have collected over 67K COVID-19 themed GitHub repositories till July 2020. We then characterize them from a number of aspects and classify them into six categories. We further investigate the contribution patterns of the contributors, and development and maintenance patterns of the repositories. This study sheds light on the promising direction of adopting open source technologies and resources to rapidly tackle the worldwide public health emergency in practice, and reveals existing challenges for improvement."}, "conf/icse/LiH0CL21": {"title": "DeepPayload: Black-box Backdoor Attack on Deep Learning Models through Neural Payload Injection.", "url": "https://doi.org/10.1109/ICSE43902.2021.00035", "year": "2021", "author": {"Yuanchun Li": "87/4523", "Jiayi Hua": "251/9425", "Haoyu Wang 0001": "50/8499-1", "Chunyang Chen": "180/7246", "Yunxin Liu": "55/3521"}, "abstract": " Abstract:Deep learning models are increasingly used in mobile applications as critical components. Unlike the program bytecode whose vulnerabilities and threats have been widely-discussed, whether and how the deep learning models deployed in the applications can be compromised are not well-understood since Neural Networks are usually viewed as a black box. In this paper, we introduce a highly practical backdoor attack achieved with a set of reverse-engineering techniques over compiled deep learning models. The core of the attack is a neural conditional branch constructed with a trigger detector and several operators and injected into the victim model as a malicious payload. The attack is effective as the conditional logic can be flexibly customized by the attacker, and scalable as it does not require any prior knowledge from the original model. We evaluated the attack effectiveness using 5 state-of-the-art deep learning models and real-world samples collected from 30 users. The results demonstrated that the injected backdoor can be triggered with a success rate of 93.5%, while only brought less than 2ms latency overhead and no more than 1.4% accuracy decrease. We further conducted an empirical study on real-world mobile deep learning apps collected from Google Play. We found 54 apps that were vulnerable to our attack, including popular and security-critical ones. The results call for the awareness of deep learning application developers and auditors to enhance the protection of deployed models."}, "conf/icse/ChenYLCLWL21": {"title": "An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications.", "url": "https://doi.org/10.1109/ICSE43902.2021.00068", "year": "2021", "author": {"Zhenpeng Chen": "200/8104", "Huihan Yao": "283/5859", "Yiling Lou": "174/3394", "Yanbin Cao": "232/2125", "Yuanqiang Liu": "232/2330", "Haoyu Wang 0001": "50/8499-1", "Xuanzhe Liu": "08/2161"}, "abstract": " Abstract:Deep learning (DL) is moving its step into a growing number of mobile software applications. These software applications, named as DL based mobile applications (abbreviated as mobile DL apps) integrate DL models trained using large-scale data with DL programs. A DL program encodes the structure of a desirable DL model and the process by which the model is trained using training data. Due to the increasing dependency of current mobile apps on DL, software engineering (SE) for mobile DL apps has become important. However, existing efforts in SE research community mainly focus on the development of DL models and extensively analyze faults in DL programs. In contrast, faults related to the deployment of DL models on mobile devices (named as deployment faults of mobile DL apps) have not been well studied. Since mobile DL apps have been used by billions of end users daily for various purposes including for safety-critical scenarios, characterizing their deployment faults is of enormous importance. To fill in the knowledge gap, this paper presents the first comprehensive study to date on the deployment faults of mobile DL apps. We identify 304 real deployment faults from Stack Overflow and GitHub, two commonly used data sources for studying software faults. Based on the identified faults, we construct a fine-granularity taxonomy consisting of 23 categories regarding to fault symptoms and distill common fix strategies for different fault symptoms. Furthermore, we suggest actionable implications and research avenues that can potentially facilitate the deployment of DL models on mobile devices."}, "conf/icse/HuWJXLG021": {"title": "CHAMP: Characterizing Undesired App Behaviors from User Comments based on Market Policies.", "url": "https://doi.org/10.1109/ICSE43902.2021.00089", "year": "2021", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Tiantong Ji": "286/8193", "Xusheng Xiao": "13/9656", "Xiapu Luo": "53/1565", "Peng Gao 0008": "29/5999-8", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:Millions of mobile apps have been available through various app markets. Although most app markets have enforced a number of automated or even manual mechanisms to vet each app before it is released to the market, thousands of low-quality apps still exist in different markets, some of which violate the explicitly specified market policies. In order to identify these violations accurately and timely, we resort to user comments, which can form an immediate feedback for app market maintainers, to identify undesired behaviors that violate market policies, including security-related user concerns. Specifically, we present the first large-scale study to detect and characterize the correlations between user comments and market policies. First, we propose CHAMP, an approach that adopts text mining and natural language processing (NLP) techniques to extract semantic rules through a semi-automated process, and classifies comments into 26 pre-defined types of undesired behaviors that violate market policies. Our evaluation on real-world user comments shows that it achieves both high precision and recall (>0.9) in classifying comments for undesired behaviors. Then, we curate a large-scale comment dataset (over 3 million user comments) from apps in Google Play and 8 popular alternative Android app markets, and apply CHAMP to understand the characteristics of undesired behavior comments in the wild. The results confirm our speculation that user comments can be used to pinpoint suspicious apps that violate policies declared by app markets. The study also reveals that policy violations are widespread in many app markets despite their extensive vetting efforts. CHAMP can be a whistle blower that assigns policy-violation scores and identifies most informative comments for apps."}, "conf/mobilesoft/ZhaoYSLWM21": {"title": "Assessing the Feasibility of Web-Request Prediction Models on Mobile Platforms.", "url": "https://doi.org/10.1109/MobileSoft52590.2021.00008", "year": "2021", "author": {"Yixue Zhao": "179/8606", "Siwei Yin": "278/2348", "Adriana Sejfia": "200/2638", "Marcelo Schmitt Laser": "166/4416", "Haoyu Wang 0001": "50/8499-1", "Nenad Medvidovic": "65/1728"}, "abstract": " Abstract:Prefetching web pages is a well-studied solution to reduce network latency by predicting users' future actions based on their past behaviors. However, such techniques are largely unexplored on mobile platforms. Today's privacy regulations make it infeasible to explore prefetching with the usual strategy of amassing large amounts of data over long periods and constructing conventional, \"large\" prediction models. Our work is based on the observation that this may not be necessary: Given previously reported mobile-device usage trends (e.g., repetitive behaviors in brief bursts), we hypothesized that prefetching should work effectively with \"small\" models trained on mobile-user requests collected during much shorter time periods. To test this hypothesis, we constructed a framework for automatically assessing prediction models, and used it to conduct an extensive empirical study based on over 15 million HTTP requests collected from nearly 11,500 mobile users during a 24-hour period, resulting in over 7 million models. Our results demonstrate the feasibility of prefetching with small models on mobile platforms, directly motivating future work in this area. We further introduce several strategies for improving prediction models while reducing the model size. Finally, our framework provides the foundation for future explorations of effective prediction models across a range of usage scenarios."}, "conf/msr/Hua021": {"title": "On the Effectiveness of Deep Vulnerability Detectors to Simple Stupid Bug Detection.", "url": "https://doi.org/10.1109/MSR52588.2021.00068", "year": "2021", "author": {"Jiayi Hua": "251/9425", "Haoyu Wang 0001": "50/8499-1"}, "abstract": " Abstract:Recent studies have shown the promising direction of deep learning based bug detection, which relieves human experts from the tedious and subjective task of manually summarizing features. Simple one-statement bugs (i.e., SStuBs), which occur relatively often in Java projects, cannot be well spotted by existing static analysis tools. In this paper, we make effort to empirically analyze whether deep learning based techniques could be used to detecting SStuBs. We have re-implemented two state-of-the-art techniques in approximately 3,000 lines of code and adopted them to detecting Java SStuBs. Experiments on large-scale datasets suggest that although deep vulnerability detectors can achieve much better results than existing static analyzers, the SStuBs cannot be well flagged when comparing with traditional complex vulnerabilities. We further look in detail on the per bug category basis, observing that deep learning based methods perform better when detecting some specific types of bugs (e.g., \"Same Function Change Caller\"), which have strong data flow and control flow semantic. Our observations could offer implications on the automated detection and repair of SStuBs."}, "conf/seke/WangLZBSW21": {"title": "Understanding the Impact of COVID-19 on Github Developers: A Preliminary Study.", "url": "https://doi.org/10.18293/SEKE2021-132", "year": "2021", "author": {"Liu Wang 0002": "10/3099-2", "Ruiqing Li": "246/6396", "Jiaxin Zhu": "150/8816", "Guangdong Bai": "86/9673", "Weihang Su": "301/7966", "Haoyu Wang 0001": "50/8499-1"}, "abstract": ""}, "conf/sigmetrics/GaoWXWZLT21": {"title": "Tracking Counterfeit Cryptocurrency End-to-end.", "url": "https://doi.org/10.1145/3410220.3456282", "year": "2021", "author": {"Bingyu Gao": "260/6730", "Haoyu Wang 0001": "50/8499-1", "Pengcheng Xia": "197/8181", "Siwei Wu": "240/8368", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Gareth Tyson": "85/85"}, "abstract": "\n\t\tWith the growth of the cryptocurrency ecosystem, there is expanding evidence that counterfeit cryptocurrency has also appeared. In this paper, we empirically explore the presence of counterfeit cryptocurrencies on Ethereum and measure their impact. By analyzing over 190K ERC-20 tokens (or cryptocurrencies) on Ethereum, we have identified 2,117 counterfeit tokens that target 94 of the 100 most popular cryptocurrencies. We perform an end-to-end characterization of the counterfeit token ecosystem, including their popularity, creators and holders, fraudulent behaviors and advertising channels. Through this, we have identified two types of scams related to counterfeit tokens and devised techniques to identify such scams. We observe that over 7,104 victims were deceived in these scams, and the overall financial loss sums to a minimum of $17 million (74,271.7 ETH). Our findings demonstrate the urgency to identify counterfeit cryptocurrencies and mitigate this threat.\n\t"}, "conf/sigmetrics/ChenLSHWWL21": {"title": "SADPonzi: Detecting and Characterizing Ponzi Schemes in Ethereum Smart Contracts.", "url": "https://doi.org/10.1145/3410220.3460105", "year": "2021", "author": {"Weimin Chen": "35/966", "Xinran Li": "57/10368", "Yuting Sui": "294/1625", "Ningyu He": "228/1460", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Xiapu Luo": "53/1565"}, "abstract": "\n\t\tPonzi schemes are financial scams that lure users under the promise of high profits. With the prosperity of Bitcoin and blockchain technologies, there has been growing anecdotal evidence that this classic fraud has emerged in the blockchain ecosystem. Existing studies have proposed machine-learning based approaches for detecting Ponzi schemes. However, these state-of-the-art approaches face several major limitations, including lacking interpretability, high false positive rates and the weak robustness to evasion techniques, These limitations mean that existing real-world methods for detecting Ponzi schemes are ineffective. In this paper, we propose SADPonzi, a semantic-aware detection approach for identifying Ponzi schemes in Ethereum smart contracts. Specifically, we propose a heuristic-guided symbolic execution technique to identify investor-related transfer behaviors and the distribution strategies adopted. Experimental result on a well-labelled benchmark suggests that SADPonzi can achieve 100% precision and recall, outperforming all existing machine-learning based techniques. We further apply SADPonzi to all 3.4 million smart contracts deployed by EOAs in Ethereum and identify 835 Ponzi scheme contracts, with over 17 million US Dollars invested by victims. Our observations confirm the urgency of identifying and mitigating Ponzi schemes in the blockchain ecosystem.\n\t"}, "conf/sp/HuaL021": {"title": "MMGuard: Automatically Protecting On-Device Deep Learning Models in Android Apps.", "url": "https://doi.org/10.1109/SPW53761.2021.00019", "year": "2021", "author": {"Jiayi Hua": "251/9425", "Yuanchun Li": "87/4523", "Haoyu Wang 0001": "50/8499-1"}, "abstract": " Abstract:On-device deep learning models have shown growing popularity in mobile apps, which allows offline model inference while preserving user privacy. However, on-device deep learning models also introduce security challenges, i.e., the trained models can be easily stolen or even be tampered by attackers. Recent studies suggested that most of the on-device models are lacking of sufficient protection, i.e., can be stolen by decompiling the apps directly. In this work, we present MMGUARD, an automated framework for building mutual authentication between Android apps and deep neural network models, which can thus protect on-device models from being easily attacked (piracy and tampering). Unlike existing model protect methods, our approach does not require model re-training or any prior knowledge of the training data. The key idea of MMGUARD is to verify the deep learning model in the app before inference, i.e., feeding owner- and apprelated information to it, which can greatly increase the effort of model hacking. We evaluate MMGUARD on 5 popular image classification DNNs and 43 real world Android apps from Google Play. Experiment results suggest that MMGUARD introduces negligible latency on models and can be automatically applied to real world apps."}, "conf/uss/HeZ00L0YJ21": {"title": "EOSAFE: Security Analysis of EOSIO Smart Contracts.", "url": "https://www.usenix.org/conference/usenixsecurity21/presentation/he-ningyu", "year": "2021", "author": {"Ningyu He": "228/1460", "Ruiyi Zhang": "08/7975", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Xiapu Luo": "53/1565", "Yao Guo 0001": "07/6300-1", "Ting Yu 0001": "y/TingYu-1", "Xuxian Jiang": "80/6988"}, "abstract": ""}, "conf/www/WuHZWLW0021": {"title": "Towards Understanding and Demystifying Bitcoin Mixing Services.", "url": "https://doi.org/10.1145/3442381.3449880", "year": "2021", "author": {"Lei Wu 0012": "68/5597-12", "Yufeng Hu": "187/2673", "Yajin Zhou": "15/7381", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Zhi Wang 0004": "95/6543-4", "Fan Zhang 0010": "21/3626-10", "Kui Ren 0001": "20/6179-1"}, "abstract": "\n\t\t One reason for the popularity of Bitcoin is due to its anonymity. Although several heuristics have been used to break the anonymity, new approaches are proposed to enhance its anonymity at the same time. One of them is the mixing service. Unfortunately, mixing services have been abused to facilitate criminal activities, e.g., money laundering. As such, there is an urgent need to systematically understand Bitcoin mixing services.  In this paper, we take the first step to understand state-of-the-art Bitcoin mixing services. Specifically, we propose a generic abstraction model for mixing services and observe that there are two mixing mechanisms in the wild, i.e. swapping and obfuscating. Based on this model, we conduct a transaction-based analysis and successfully reveal the mixing mechanisms of four representative services. Besides, we propose a method to identify mixing transactions that leverage the obfuscating mechanism. The proposed approach is able to identify over 92% of the mixing transactions. Based on identified transactions, we then estimate the profit of mixing services and provide a case study of tracing the money flow of stolen Bitcoins.\n\t"}, "conf/www/LinWWL21": {"title": "A Longitudinal Study of Removed Apps in iOS App Store.", "url": "https://doi.org/10.1145/3442381.3449990", "year": "2021", "author": {"Fuqi Lin": "281/2549", "Haoyu Wang 0001": "50/8499-1", "Liu Wang 0002": "10/3099-2", "Xuanzhe Liu": "08/2161"}, "abstract": "\n\t\tTo improve app quality and nip the potential threats in the bud, modern app markets have released strict guidelines along with app vetting process before app publishing. However, there has been growing evidence showing the ineffectiveness of app vetting, making potentially harmful and policy-violation apps sneak into the market from time to time. Therefore, app removal is a common practice, and market maintainers have to remove undesired apps from the market periodically in a reactive manner. Although a number of reports and news media have mentioned removed apps, our research community still lacks the comprehensive understanding of the landscape of this kind of apps. To fill the void, in this paper, we present a large-scale and longitudinal study of removed apps in iOS app store. We first make great efforts to record daily snapshot of iOS app store continuously in a span of 1.5 years. By comparing each two consecutive snapshots, we have collected the information of over 1 million removed apps with their accurate removed date. This comprehensive dataset enables us to characterize the overall landscape of removed apps. We observe that, although most of the removed apps are low-quality apps (e.g., outdated and abandoned), a number of the removed apps are quite popular. We further investigate the practical reasons leading to the removal of such popular apps, and observe several interesting reasons, including ranking fraud, fake description, and content issues, etc. More importantly, most of these mis-behaviors can be reflected on app meta information including app description, app review, and ASO keywords. It motivates us to design an automated approach to flagging the removed apps. Experiment result suggests that, even without accessing to the bytecode of mobile apps, we can identify the removed apps with good performance (F1=83%). Furthermore, we are able to flag the removed apps in advance as long as their inappropriate behaviors appear in their metadata. We believe our approach can work as a whistle blower that pinpoints policy-violation behaviors timely, which will be quite effective in improving the app maintenance process. \n\t"}, "conf/www/GaoW0LXL21": {"title": "Demystifying Illegal Mobile Gambling Apps.", "url": "https://doi.org/10.1145/3442381.3449932", "year": "2021", "author": {"Yuhao Gao": "222/5602", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Xiapu Luo": "53/1565", "Guoai Xu": "76/10013", "Xuanzhe Liu": "08/2161"}, "abstract": "\n\t\t Mobile gambling app, as a new type of online gambling service emerging in the mobile era, has become one of the most popular and lucrative underground businesses in the mobile app ecosystem. Since its born, mobile gambling app has received strict regulations from both government authorities and app markets. However, to the best of our knowledge, mobile gambling apps have not been investigated by our research community. In this paper, we take the first step to fill the void. Specifically, we first perform a 5-month dataset collection process to harvest illegal gambling apps in China, where mobile gambling apps are outlawed. We have collected 3,366 unique gambling apps with 5,344 different versions. We then characterize the gambling apps from various perspectives including app distribution channels, network infrastructure, malicious behaviors, abused third-party and payment services. Our work has revealed a number of covert distribution channels, the unique characteristics of gambling apps, and the abused fourth-party payment services. At last, we further propose a “guilt-by-association” expansion method to identify new suspicious gambling services, which help us further identify over 140K suspicious gambling domains and over 57K gambling app candidates. Our study demonstrates the urgency for detecting and regulating illegal gambling apps.\n\t"}, "conf/chi/WoltersLWYG20": {"title": "Does the Presence of Privacy Relevant Information Affect App Market Choice?", "url": "https://doi.org/10.1145/3334480.3383078", "year": "2020", "author": {"Maria K. Wolters": "16/9546", "Shuobing Li": "264/7993", "Haoyu Wang 0001": "50/8499-1", "Xinyu Yang": "89/473", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n\t\tWhile in most countries, Google Play and Apple App Store dominate, Chinese mobile phone users can choose among dozens of different app markets, which differ greatly in the information presented. This makes the Chinese mobile ecosystem a unique case study for investigating whether users actively choose app markets that conform to their preferences. We investigated this question in a survey of 200 Chinese users aged 18-49. Scenarios covered apps that require disclosure of different types of sensitive information (shopping, dating, health), with gaming as a baseline. Users preferred markets that were easy to use and had a wide choice of apps. Only nine users highlighted security as a feature. Despite this, they primarily used only one app market - the pre-installed one. App-market specific features were important for the game scenario, but less important for all others. We suggest that download decisions for most apps are made before users enter an app market, and discuss implications for presenting privacy and security information.\n\t"}, "conf/ecrime/XiaWLWZBXHL20": {"title": "Don't Fish in Troubled Waters! Characterizing Coronavirus-themed Cryptocurrency Scams.", "url": "https://doi.org/10.1109/eCrime51433.2020.9493255", "year": "2020", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Lei Wu 0012": "68/5597-12", "Yajin Zhou": "15/7381", "Guangdong Bai": "86/9673", "Guoai Xu": "76/10013", "Gang Huang 0001": "11/539-1", "Xuanzhe Liu": "08/2161"}, "abstract": " Abstract:As COVID-19 has been spreading across the world since early 2020, a growing number of malicious campaigns are capitalizing the topic of COVID-19. COVID-19 themed cryptocurrency scams are increasingly popular during the pandemic. However, these newly emerging scams are poorly understood by our community. In this paper, we present the first measurement study of COVID-19 themed cryptocurrency scams. We first create a comprehensive taxonomy of COVID-19 scams by manually analyzing the existing scams reported by users from online resources. Then, we propose a hybrid approach to perform the investigation by: 1) collecting reported scams in the wild; and 2) detecting undisclosed ones based on information collected from suspicious entities (e.g., domains, tweets, etc). We have collected 195 confirmed COVID-19 cryptocurrency scams in total, including 91 token scams, 19 giveaway scams, 9 blackmail scams, 14 crypto malware scams, 9 Ponzi scheme scams, and 53 donation scams. We then identified over 200 blockchain addresses associated with these scams, which lead to at least 330K US dollars in losses from 6,329 victims. For each type of scams, we further investigated the tricks and social engineering techniques they used. To facilitate future research, we have released all the well-labelled scams to the research community."}, "conf/fc/HeWWGJ20": {"title": "Characterizing Code Clones in the Ethereum Smart Contract Ecosystem.", "url": "https://doi.org/10.1007/978-3-030-51280-4_35", "year": "2020", "author": {"Ningyu He": "228/1460", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Xuxian Jiang": "80/6988"}, "abstract": "In this paper, we present the first large-scale and systematic study to characterize the code reuse practice in the Ethereum smart contract ecosystem. We first performed a detailed similarity comparison study on a dataset of 10 million contracts we had harvested, and then we further conducted a qualitative analysis to characterize the diversity of the ecosystem, understand the correlation between code reuse and vulnerabilities, and detect the plagiarized DApps. Our analysis revealed that over 96% of the contracts had duplicates, while a large number of them were similar, which suggests that the ecosystem is highly homogeneous. Our results also suggested that roughly 9.7% of the similar contract pairs have exactly the same vulnerabilities, which we assume were introduced by code clones. In addition, we identified 41 DApps clusters, involving 73 plagiarized DApps which had caused huge financial loss to the original creators, accounting for 1/3 of the original market volume.KeywordsCode cloneSmart contractEthereumVulnerability"}, "conf/iceccs/JiHWWB020": {"title": "DEPOSafe: Demystifying the Fake Deposit Vulnerability in Ethereum Smart Contracts.", "url": "https://doi.org/10.1109/ICECCS51672.2020.00022", "year": "2020", "author": {"Ru Ji": "260/7114", "Ningyu He": "228/1460", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1", "Guangdong Bai": "86/9673", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:Cryptocurrency has seen an explosive growth in recent years, thanks to the evolvement of blockchain technology and its economic ecosystem. Besides Bitcoin, thousands of cryptocur-rencies have been distributed on blockchains, while hundreds of cryptocurrency exchanges are emerging to facilitate the trading of digital assets. At the same time, it also attracts the attentions of attackers. Fake deposit, as one of the most representative attacks (vulnerabilities) related to exchanges and tokens, has been frequently observed in the blockchain ecosystem, causing large financial losses. However, besides a few security reports, our community lacks the understanding of this vulnerability, for example its scale and the impacts. In this paper, we take the first step to demystify the fake deposit vulnerability. Based on the essential patterns we have summarized, we implement DEPOSafe, an automated tool to detect and verify (exploit) the fake deposit vulnerability in ERC-20 smart contracts. DEPOSafe incorporates several key techniques including symbolic execution based static analysis and behavior modeling based dynamic verification. By applying DEPOSafe to 176,000 ERC-20 smart contracts, we have identified over 7,000 vulnerable contracts that may suffer from two types of attacks. Our findings demonstrate the urgency to identify and prevent the fake deposit vulnerability."}, "conf/icsm/WangMW0G020": {"title": "A", "url": "https://doi.org/10.1109/ICSME46990.2020.00064", "year": "2020", "author": {"Wei Wang": "35/7092", "Guozhu Meng": "134/8681", "Haoyu Wang 0001": "50/8499-1", "Kai Chen 0012": "c/KaiChen12", "Weimin Ge": "43/626", "Xiaohong Li 0001": "08/2489-1"}, "abstract": " Abstract:Authorship identification is the process of identifying and classifying authors through given codes. Authorship identification can be used in a wide range of software domains, e.g., code authorship disputes, plagiarism detection, exposure of attackers’ identity. Besides the inherent challenges from legacy software development, framework programming and crowdsourcing mode in Android raise the difficulties of authorship identification significantly. More specifically, widespread third party libraries and inherited components (e.g., classes, methods, and variables) dilute the primary code within the entire Android app and blur the boundaries of code written by different authors. However, prior research has not well addressed these challenges.To this end, we design a two-phased approach to attribute the primary code of an Android app to the specific developer. In the first phase, we put forward three types of strategies to identify the relationships between Java packages in an app, which consist of context, semantic and structural relationships. A package aggregation algorithm is developed to cluster all packages that are of high probability written by the same authors. In the second phase, we develop three types of features to capture authors’ coding habits and code stylometry. Based on that, we generate fingerprints for an author from its developed Android apps and employ several machine learning algorithms for authorship classification. We evaluate our approach in three datasets that contain 15,666 apps from 257 distinct developers and achieve a 92.5% accuracy rate on average. Additionally, we test it on 2,900 obfuscated apps and our approach can classify apps with an accuracy rate of 80.4%."}, "conf/kbse/LiGK0HLB20": {"title": "KnowledgeZooClient: constructing knowledge graph for Android.", "url": "https://doi.org/10.1145/3417113.3422187", "year": "2020", "author": {"Li Li 0029": "53/2189-29", "Jun Gao 0001": "82/4977-1", "Pingfan Kong": "144/4778", "Haoyu Wang 0001": "50/8499-1", "Mengyu Huang": "129/1180", "Yuan-Fang Li": "20/2537", "Tegawendé F. Bissyandé": "00/8006"}, "abstract": "\n\t\tIn this work, we describe the design and implementation of a reusable tool named KnowledgeZooClient targeting the construction, as a crowd-sourced effort, of a knowledge graph for Android apps. KnowledgeZooClient is made up of two modules: (1) the Metadata Extraction Module (MEM), which aims at extracting metadata from Android apps and (2) the Metadata Integration Module (MIM) for importing and integrating extracted metadata into a graph database. The usefulness of KnowledgeZooClient is demonstrated via an exclusive knowledge graph called KnowledgeZoo, which contains information on over 500,000 apps already and still keeps growing. Interested users can already benefit from KnowledgeZoo by writing advanced search queries so as to collect targeted app samples.\n\t"}, "conf/kbse/WangWW20": {"title": "Market-level analysis of government-backed COVID-19 contact tracing apps.", "url": "https://doi.org/10.1145/3417113.3422186", "year": "2020", "author": {"Huiyi Wang": "24/4232", "Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "\n\t\tTo help curb the spread of the COVID-19 pandemic, governments and public health authorities around the world have launched a number of contact-tracing apps. Although contact tracing apps have received extensive attentions from the research community, no existing work has characterized the users' adoption of contact tracing apps from the app market level. In this work, we perform the first market-level analysis of contact tracing apps. We perform a longitudinal empirical study (over 4 months) of eight government-backed COVID-19 contact tracing apps in iOS app store. We first collect all the daily meta information (e.g., app updates, app rating, app comments, etc.) of these contact tracing apps from their launch to 2020-07-31. Then we characterize them from release practice, app popularity, and mobile users' feedback. Our study reveals various issues related to contact tracing apps from the users' perspective, hoping to help improve the quality of contact tracing apps and thus achieving a high level of adoption in the population.\n\t"}, "conf/kbse/ZhouWZLTXW20": {"title": "Demystifying Diehard Android Apps.", "url": "https://doi.org/10.1145/3324884.3416637", "year": "2020", "author": {"Hao Zhou": "63/778", "Haoyu Wang 0001": "50/8499-1", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Yutian Tang": "120/1174", "Lei Xue 0001": "68/2052-1", "Ting Wang 0006": "12/2633-6"}, "abstract": "\n\t\tSmartphone vendors are using multiple methods to kill processes of Android apps to reduce the battery consumption. This motivates developers to find ways to extend the liveness time of their apps, hence the name diehard apps in this paper. Although there are blogs and articles illustrating methods to achieve this purpose, there is no systematic research about them. What's more important, little is known about the prevalence of diehard apps in the wild. In this paper, we take a first step to systematically investigate diehard apps by answering the following research questions. First, why and how can they circumvent the resource-saving mechanisms of Android? Second, how prevalent are they in the wild? In particular, we conduct a semi-automated analysis to illustrate insights why existing methods to kill app processes could be evaded, and then systematically present 12 diehard methods. After that, we develop a system named DiehardDetector to detect diehard apps in a large scale. The experimental result of applying DiehardDetector to more than 80k Android apps downloaded from Google Play showed that around 21% of apps adopt various diehard methods. Moreover, our system can achieve high precision and recall.\n\t"}, "conf/kbse/ZhouCWYLWZ20": {"title": "UI Obfuscation and Its Effects on Automated UI Analysis for Android Apps.", "url": "https://doi.org/10.1145/3324884.3416642", "year": "2020", "author": {"Hao Zhou": "63/778", "Ting Chen 0002": "19/1766-2", "Haoyu Wang 0001": "50/8499-1", "Le Yu": "23/7122", "Xiapu Luo": "53/1565", "Ting Wang 0006": "12/2633-6", "Wei Zhang 0122": "10/4661-122"}, "abstract": "\n\t\tThe UI driven nature of Android apps has motivated the development of automated UI analysis for various purposes, such as app analysis, malicious app detection, and app testing. Although existing automated UI analysis methods have demonstrated their capability in dissecting apps' UI, little is known about their effectiveness in the face of app protection techniques, which have been adopted by more and more apps. In this paper, we take a first step to systematically investigate UI obfuscation for Android apps and its effects on automated UI analysis. In particular, we point out the weaknesses in existing automated UI analysis methods and design 9 UI obfuscation approaches. We implement these approaches in a new tool named UIObfuscator after tackling several technical challenges. Moreover, we feed 3 kinds of tools that rely on automated UI analysis with the apps protected by UIObfuscator, and find that their performances severely drop. This work reveals limitations of automated UI analysis and sheds light on app protection techniques.\n\t"}, "conf/kbse/ZhanFLCLWXLL20": {"title": "Automated Third-Party Library Detection for Android Applications: Are We There Yet?", "url": "https://doi.org/10.1145/3324884.3416582", "year": "2020", "author": {"Xian Zhan": "154/0904", "Lingling Fan 0003": "11/2636-3", "Tianming Liu": "96/5013", "Sen Chen": "180/8218", "Li Li 0029": "53/2189-29", "Haoyu Wang 0001": "50/8499-1", "Yifei Xu": "11/504", "Xiapu Luo": "53/1565", "Yang Liu 0003": "51/3710-3"}, "abstract": "\n\t\tThird-party libraries (TPLs) have become a significant part of the Android ecosystem. Developers can employ various TPLs with different functionalities to facilitate their app development. Unfortunately, the popularity of TPLs also brings new challenges and even threats. TPLs may carry malicious or vulnerable code, which can infect popular apps to pose threats to mobile users. Besides, the code of third-party libraries could constitute noises in some downstream tasks (e.g., malware and repackaged app detection). Thus, researchers have developed various tools to identify TPLs. However, no existing work has studied these TPL detection tools in detail; different tools focus on different applications with performance differences, but little is known about them. To better understand existing TPL detection tools and dissect TPL detection techniques, we conduct a comprehensive empirical study to fill the gap by evaluating and comparing all publicly available TPL detection tools based on four criteria: effectiveness, efficiency, code obfuscation-resilience capability, and ease of use. We reveal their advantages and disadvantages based on a systematic and thorough empirical study. Furthermore, we also conduct a user study to evaluate the usability of each tool. The results show that LibScout outperforms others regarding effectiveness, LibRadar takes less time than others and is also regarded as the most easy-to-use one, and LibPecker performs the best in defending against code obfuscation techniques. We further summarize the lessons learned from different perspectives, including users, tool implementation, and researchers. Besides, we enhance these open-sourced tools by fixing their limitations to improve their detection ability. We also build an extensible framework that integrates all existing available TPL detection tools, providing online service for the research community. We make publicly available the evaluation dataset and enhanced tools. We believe our work provides a clear picture of existing TPL detection techniques and also give a road-map for future directions.\n\t"}, "conf/qrs/XuHGHLXHW20": {"title": "Dissecting Mobile Offerwall Advertisements: An Explorative Study.", "url": "https://doi.org/10.1109/QRS51102.2020.00072", "year": "2020", "author": {"Xu Xu": "50/5827", "Yangyu Hu": "188/6980", "Qian Guo": "22/2222", "Ren He": "40/713", "Li Li 0029": "53/2189-29", "Guoai Xu": "76/10013", "Zhihui Han": "143/6512", "Haoyu Wang 0001": "50/8499-1"}, "abstract": " Abstract:Mobile advertising has become the most popular monetizing way in the Android app ecosystem. Offerwall, as a new form of mobile ads, has been widely adopted by apps, and a number of ad networks have provided such services. Although new to the ecosystem, offerwall ads have been criticized for being aggressive, and the contents disseminated are prone to security issues. However, to date, our community has not proposed any studies to dissect such issues related to offerwall ads. To this end, we present the first work to fill this gap. Specifically, we first develop a robust approach to identify apps that have embedded with offerwall ads. Then, we apply the tool to 10K apps and experimentally discover 312 offerwall apps. We go one step further to characterize them from several aspects, including security issues. Our observation reveals that offerwall ads could indeed be manipulated by hackers to fulfill malicious purposes."}, "conf/sigmetrics/HuangWWTLZLHJ20": {"title": "Understanding (Mis)Behavior on the EOSIO Blockchain.", "url": "https://doi.org/10.1145/3393691.3394223", "year": "2020", "author": {"Yuheng Huang 0002": "01/6508-2", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Gareth Tyson": "85/85", "Xiapu Luo": "53/1565", "Run Zhang": "68/4154", "Xuanzhe Liu": "08/2161", "Gang Huang 0001": "11/539-1", "Xuxian Jiang": "80/6988"}, "abstract": "\n\t\tEOSIO has become one of the most popular blockchain platforms since its mainnet launch in June 2018. In contrast to the traditional PoW-based systems (e.g., Bitcoin and Ethereum), which are limited by low throughput, EOSIO is the first high throughput Delegated Proof of Stake system that has been widely adopted by many decentralized applications. Although EOSIO has millions of accounts and billions of transactions, little is known about its ecosystem, especially related to security and fraud. In this paper, we perform a large-scale measurement study of the EOSIO blockchain and its associated DApps. We gather a large-scale dataset of EOSIO and characterize activities including money transfers, account creation and contract invocation. Using our insights, we then develop techniques to automatically detect bots and fraudulent activity. We discover thousands of bot accounts (over 30% of the accounts in the platform) and a number of real-world attacks (301 attack accounts). By the time of our study, 80 attack accounts we identified have been confirmed by DApp teams, causing 828,824 EOS tokens losses (roughly \\$2.6 million) in total.\n\t"}, "conf/sigsoft/ChenCLW0L20": {"title": "A comprehensive study on challenges in deploying deep learning based software.", "url": "https://doi.org/10.1145/3368089.3409759", "year": "2020", "author": {"Zhenpeng Chen": "200/8104", "Yanbin Cao": "232/2125", "Yuanqiang Liu": "232/2330", "Haoyu Wang 0001": "50/8499-1", "Tao Xie 0001": "x/TaoXie", "Xuanzhe Liu": "08/2161"}, "abstract": "\n\t\tDeep learning (DL) becomes increasingly pervasive, being used in a wide range of software applications. These software applications, named as DL based software (in short as DL software), integrate DL models trained using a large data corpus with DL programs written based on DL frameworks such as TensorFlow and Keras. A DL program encodes the network structure of a desirable DL model and the process by which the model is trained using the training data. To help developers of DL software meet the new challenges posed by DL, enormous research efforts in software engineering have been devoted. Existing studies focus on the development of DL software and extensively analyze faults in DL programs. However, the deployment of DL software has not been comprehensively studied. To fill this knowledge gap, this paper presents a comprehensive study on understanding challenges in deploying DL software. We mine and analyze 3,023 relevant posts from Stack Overflow, a popular Q&A website for developers, and show the increasing popularity and high difficulty of DL software deployment among developers. We build a taxonomy of specific challenges encountered by developers in the process of DL software deployment through manual inspection of 769 sampled posts and report a series of actionable implications for researchers, developers, and DL framework vendors.\n\t\n\t"}, "conf/sigsoft/TangSWLZ020": {"title": "All your app links are belong to us: understanding the threats of instant apps based attacks.", "url": "https://doi.org/10.1145/3368089.3409702", "year": "2020", "author": {"Yutian Tang": "120/1174", "Yulei Sui": "58/10567", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Hao Zhou": "63/778", "Zhou Xu 0003": "00/1568-3"}, "abstract": "\n\t\tAndroid deep link is a URL that takes users to a specific page of a mobile app, enabling seamless user experience from a webpage to an app. Android app link, a new type of deep link introduced in Android 6.0, is claimed to offer more benefits, such as supporting instant apps and providing more secure verification to protect against hijacking attacks that previous deep links can not. However, we find that the app link is not as secure as claimed, because the verification process can be bypassed by exploiting instant apps.  In this paper, we explore the weakness of the existing app link mechanism and propose three feasible hijacking attacks. Our findings show that even popular apps are subject to these attacks, such as Twitter, Whatsapp, Facebook Message. Our observation is confirmed by Google. To measure the severity of these vulnerabilities, we develop an automatic tool to detect vulnerable apps, and perform a large-scale empirical study on 400,000 Android apps.  Experiment results suggest that app link hijacking vulnerabilities are prevalent in the ecosystem. Specifically, 27.1% apps are vulnerable to link hijacking with smart text selection (STS); 30.0% apps are vulnerable to link hijacking without STS, and all instant apps are vulnerable to instant app attack. We provide an in-depth understanding of the mechanisms behind these types of attacks. Furthermore, we propose the corresponding detection and defense methods that can successfully prevent the proposed hijackings for all the evaluated apps, thus raising the bar against the attacks on Android app links. Our insights and findings demonstrate the urgency to identify and prevent app link hijacking attacks.\n\t\n\t"}, "conf/www/LiuW0LDGWBK20": {"title": "MadDroid: Characterizing and Detecting Devious Ad Contents for Android Apps.", "url": "https://doi.org/10.1145/3366423.3380242", "year": "2020", "author": {"Tianming Liu": "96/5013", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Xiapu Luo": "53/1565", "Feng Dong": "62/2555", "Yao Guo 0001": "07/6300-1", "Liu Wang 0002": "10/3099-2", "Tegawendé F. Bissyandé": "00/8006", "Jacques Klein": "k/JacquesKlein"}, "abstract": "\n\t\tAdvertisement drives the economy of the mobile app ecosystem. As a key component in the mobile ad business model, mobile ad content has been overlooked by the research community, which poses a number of threats, e.g., propagating malware and undesirable contents. To understand the practice of these devious ad behaviors, we perform a large-scale study on the app contents harvested through automated app testing. In this work, we first provide a comprehensive categorization of devious ad contents, including five kinds of behaviors belonging to two categories: ad loading content and ad clicking content. Then, we propose MadDroid, a framework for automated detection of devious ad contents. MadDroid leverages an automated app testing framework with a sophisticated ad view exploration strategy for effectively collecting ad-related network traffic and subsequently extracting ad contents. We then integrate dedicated approaches into the framework to identify devious ad contents. We have applied MadDroid to 40,000 Android apps and found that roughly 6% of apps deliver devious ad contents, e.g., distributing malicious apps that cannot be downloaded via traditional app markets. Experiment results indicate that devious ad contents are prevalent, suggesting that our community should invest more effort into the detection and mitigation of devious ads towards building a trustworthy mobile advertising ecosystem.\n\t"}, "conf/www/HuWH0TC0WX20": {"title": "Mobile App Squatting.", "url": "https://doi.org/10.1145/3366423.3380243", "year": "2020", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Ren He": "40/713", "Li Li 0029": "53/2189-29", "Gareth Tyson": "85/85", "Ignacio Castro": "99/11343", "Yao Guo 0001": "07/6300-1", "Lei Wu 0012": "68/5597-12", "Guoai Xu": "76/10013"}, "abstract": "\n\t\tDomain squatting, the adversarial tactic where attackers register domain names that mimic popular ones, has been observed for decades. However, there has been growing anecdotal evidence that this style of attack has spread to other domains. In this paper, we explore the presence of squatting attacks in the mobile app ecosystem. In “App Squatting”, attackers release apps with identifiers (e.g., app name or package name) that are confusingly similar to those of popular apps or well-known Internet brands. This paper presents the first in-depth measurement study of app squatting showing its prevalence and implications. We first identify 11 common deformation approaches of app squatters and propose “AppCrazy”, a tool for automatically generating variations of app identifiers. We have applied AppCrazy to the top-500 most popular apps in Google Play, generating 224,322 deformation keywords which we then use to test for app squatters on popular markets. Through this, we confirm the scale of the problem, identifying 10,553 squatting apps (an average of over 20 squatting apps for each legitimate one). Our investigation reveals that more than 51% of the squatting apps are malicious, with some being extremely popular (up to 10 million downloads). Meanwhile, we also find that mobile app markets have not been successful in identifying and eliminating squatting apps. Our findings demonstrate the urgency to identify and prevent app squatting abuses. To this end, we have publicly released all the identified squatting apps, as well as our tool AppCrazy. \n\t"}, "conf/ccs/LiuXSGWXWH19": {"title": "HyperService: Interoperability and Programmability Across Heterogeneous Blockchains.", "url": "https://doi.org/10.1145/3319535.3355503", "year": "2019", "author": {"Zhuotao Liu": "69/11514", "Yangxi Xiang": "247/9496", "Jian Shi": "78/4266", "Peng Gao 0008": "29/5999-8", "Haoyu Wang 0001": "50/8499-1", "Xusheng Xiao": "13/9656", "Bihan Wen": "158/9840", "Yih-Chun Hu": "51/6805"}, "abstract": "\n\t\tBlockchain interoperability, which allows state transitions across different blockchain networks, is critical functionality to facilitate major blockchain adoption. Existing interoperability protocols mostly focus on atomic token exchanges between blockchains. However, as blockchains have been upgraded from passive distributed ledgers into programmable state machines (thanks to smart contracts), the scope of blockchain interoperability goes beyond just token exchanges. In this paper, we present HyperService, the first platform that delivers interoperability and programmability across heterogeneous blockchains. HyperService is powered by two innovative designs: (i) a developer-facing programming framework that allows developers to build cross-chain applications in a unified programming model; and (ii) a secure blockchain-facing cryptography protocol that provably realizes those applications on blockchains. We implement a prototype of HyperService in approximately 35,000 lines of code to demonstrate its practicality. Our experiments show that (i) HyperService imposes reasonable latency, in order of seconds, on the end-to-end execution of cross-chain applications; (ii) the HyperService platform is scalable to continuously incorporate new large-scale production blockchains.\n\t"}, "conf/ccs/XiYXYXXWGL0L19": {"title": "DeepIntent: Deep Icon-Behavior Learning for Detecting Intention-Behavior Discrepancy in Mobile Apps.", "url": "https://doi.org/10.1145/3319535.3363193", "year": "2019", "author": {"Shengqu Xi": "226/1126", "Shao Yang": "141/0090", "Xusheng Xiao": "13/9656", "Yuan Yao 0001": "25/4120-1", "Yayuan Xiong": "252/3889", "Fengyuan Xu": "54/6929", "Haoyu Wang 0001": "50/8499-1", "Peng Gao 0008": "29/5999-8", "Zhuotao Liu": "69/11514", "Feng Xu 0007": "03/2611-7", "Jian Lu 0001": "38/5132"}, "abstract": "\n\t\tMobile apps have been an indispensable part in our daily life. However, there exist many potentially harmful apps that may exploit users' privacy data, e.g., collecting the user's information or sending messages in the background. Keeping these undesired apps away from the market is an ongoing challenge. While existing work provides techniques to determine what apps do, e.g., leaking information, little work has been done to answer, are the apps' behaviors compatible with the intentions reflected by the app's UI? In this work, we explore the synergistic cooperation of deep learning and program analysis as the first step to address this challenge. Specifically, we focus on the UI widgets that respond to user interactions and examine whether the intentions reflected by their UIs justify their permission uses. We present DeepIntent, a framework that uses novel deep icon-behavior learning to learn an icon-behavior model from a large number of popular apps and detect intention-behavior discrepancies. In particular, DeepIntent provides program analysis techniques to associate the intentions (i.e., icons and contextual texts) with UI widgets' program behaviors, and infer the labels (i.e., permission uses) for the UI widgets based on the program behaviors, enabling the construction of a large-scale high-quality training dataset. Based on the results of the static analysis, DeepIntent uses deep learning techniques that jointly model icons and their contextual texts to learn an icon-behavior model, and detects intention-behavior discrepancies by computing the outlier scores based on the learned model. We evaluate DeepIntent on a large-scale dataset (9,891 benign apps and 16,262 malicious apps). With 80% of the benign apps for training and the remaining for evaluation, DeepIntent detects discrepancies with AUC scores 0.8656 and 0.8839 on benign apps and malicious apps, achieving 39.9% and 26.1% relative improvements over the state-of-the-art approaches.\n\t"}, "conf/iceccs/ChengWHZXYS19": {"title": "Static Detection of Control-Flow-Related Vulnerabilities Using Graph Embedding.", "url": "https://doi.org/10.1109/ICECCS.2019.00012", "year": "2019", "author": {"Xiao Cheng": "73/1713", "Haoyu Wang 0001": "50/8499-1", "Jiayi Hua": "251/9425", "Miao Zhang": "60/7041", "Guoai Xu": "76/10013", "Li Yi": "26/4239", "Yulei Sui": "58/10567"}, "abstract": " Abstract:Static vulnerability detection has shown its effectiveness in detecting well-defined low-level memory errors. However, high-level control-flow related (CFR) vulnerabilities, such as insufficient control flow management (CWE-691), business logic errors (CWE-840), and program behavioral problems (CWE-438), which are often caused by a wide variety of bad programming practices, posing a great challenge for existing general static analysis solutions. This paper presents a new deep-learning-based graph embedding approach to accurate detection of CFR vulnerabilities. Our approach makes a new attempt by applying a recent graph convolutional network to embed code fragments in a compact and low-dimensional representation that preserves high-level control-flow information of a vulnerable program. We have conducted our experiments using 8,368 real-world vulnerable programs by comparing our approach with several traditional static vulnerability detectors and state-of-the-art machine-learning-based approaches. The experimental results show the effectiveness of our approach in terms of both accuracy and recall. Our research has shed light on the promising direction of combining program analysis with deep learning techniques to address the general static analysis challenges."}, "conf/icse/WangW019": {"title": "Characterizing the global mobile app developers: a large-scale empirical study.", "url": "https://doi.org/10.1109/MOBILESoft.2019.00031", "year": "2019", "author": {"Haoyu Wang 0001": "50/8499-1", "Xupu Wang": "245/7693", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:The rapid growth of the mobile app ecosystem has attracted a great number of mobile app developers. However, few previous studies have analyzed app developers comprehensively at a large scale, and little is known of the characteristics of mobile app developers. In this work, we take the first step to understand global app developers from the view of mobile app life-cycle. We have created a repository of over 1.03 million Android app developers distributed at Google Play and 16 popular alternative markets, along with over 6.2 million Android apps (including apks and metadata) they created. We then explored various characteristics of these app developers from different angles including developing behaviors, releasing behaviors, app maintenance behaviors and malicious behaviors. The experimental results have revealed various interesting findings, as well as insights for future research directions. Our efforts can contribute to different stakeholders of the mobile app ecosystem."}, "conf/icse/KanWW0X19": {"title": "Deobfuscating Android native binary code.", "url": "https://doi.org/10.1109/ICSE-Companion.2019.00135", "year": "2019", "author": {"Zeliang Kan": "224/9517", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": " Abstract:In this paper, we propose an automated approach to facilitate the deobfuscation of Android native binary code. Specifically, given a native binary obfuscated by Obfuscator-LLVM (the most popular native code obfuscator), our deobfuscation system is capable of recovering the original Control Flow Graph. To the best of our knowledge, it is the first work that aims to tackle the problem. We have applied our system in different scenarios, and the experimental results demonstrate the effectiveness of our system based on generic similarity comparison metrics."}, "conf/isw/YeZBDLDW19": {"title": "LightSense: A Novel Side Channel for Zero-permission Mobile User Tracking.", "url": "https://doi.org/10.1007/978-3-030-30215-3_15", "year": "2019", "author": {"Quanqi Ye": "174/4963", "Yan Zhang": "04/3348", "Guangdong Bai": "86/9673", "Naipeng Dong": "82/9243", "Zhenkai Liang": "99/4951", "Jin Song Dong": "33/6517", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "Android devices are equipped with various sensors. Permissions from users must be explicitly granted for apps to obtain sensitive information, e.g., geographic location. However, some of the sensors are considered trivial such that no permission control is enforced over them, e.g., the ambient light sensor. In this work, we present a novel side channel, i.e. the ambient light sensor, that can be used to track the mobile users. We develop a location tracking system with off-line trained route identification models using the values from the attacker’s own ambient light sensor. The system can then be used to track a user’s geographic location. The experiment results show that our route identification models achieve a high accuracy of over 91% in user’s route identification and our tracking system achieves an accuracy at about 64% in real-time tracking the user with estimation error at about 70 m. Our system out-performs the state-of-the-art works with other side channels. Our work shows that with merely the values from the ambient light sensor of user’s mobile phone that requires zero-permission to access, the geographic routes that the users have taken and their real-time locations can be identified with machine learning techniques in high accuracy."}, "conf/kbse/LiuW0B0X19": {"title": "DaPanda: Detecting Aggressive Push Notifications in Android Apps.", "url": "https://doi.org/10.1109/ASE.2019.00017", "year": "2019", "author": {"Tianming Liu": "96/5013", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Guangdong Bai": "86/9673", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": " Abstract:Mobile push notifications have been widely used in mobile platforms to deliver all sorts of information to app users. Although it offers great convenience for both app developers and mobile users, this feature was frequently reported to serve malicious and aggressive purposes, such as delivering annoying push notification advertisement. However, to the best of our knowledge, this problem has not been studied by our research community so far. To fill the void, this paper presents the first study to detect aggressive push notifications and further characterize them in the global mobile app ecosystem on a large scale. To this end, we first provide a taxonomy of mobile push notifications and identify the aggressive ones using a crowdsourcing-based method. Then we propose sc DaPanda, a novel hybrid approach, aiming at automatically detecting aggressive push notifications in Android apps. sc DaPanda leverages a guided testing approach to systematically trigger and record push notifications. By instrumenting the Android framework, sc DaPanda further collects all notification-relevant runtime information to flag the aggressive ones. Our experimental results show that sc DaPanda is capable of detecting different types of aggressive push notifications effectively in an automated way. By applying sc DaPanda to 20,000 Android apps from different app markets, it yields over 1,000 aggressive notifications, which have been further confirmed as true positives. Our in-depth analysis further reveals that aggressive notifications are prevalent across different markets and could be manifested in all the phases in the lifecycle of push notifications. It is hence urgent for our community to take actions to detect and mitigate apps involving aggressive push notifications."}, "conf/kbse/WangLXMG19": {"title": "Characterizing Android App Signing Issues.", "url": "https://doi.org/10.1109/ASE.2019.00035", "year": "2019", "author": {"Haoyu Wang 0001": "50/8499-1", "Hongxuan Liu": "208/2343", "Xusheng Xiao": "13/9656", "Guozhu Meng": "134/8681", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:In the app releasing process, Android requires all apps to be digitally signed with a certificate before distribution. Android uses this certificate to identify the author and ensure the integrity of an app. However, a number of signature issues have been reported recently, threatening the security and privacy of Android apps. In this paper, we present the first large-scale systematic measurement study on issues related to Android app signatures. We first create a taxonomy covering four types of app signing issues (21 anti-patterns in total), including vulnerabilities, potential attacks, release bugs and compatibility issues. Then we developed an automated tool to characterize signature-related issues in over 5 million app items (3 million distinct apks) crawled from Google Play and 24 alternative Android app markets. Our empirical findings suggest that although Google has introduced apk-level signing schemes (V2 and V3) to overcome some of the known security issues, more than 93% of the apps still use only the JAR signing scheme (V1), which poses great security threats. Besides, we also revealed that 7% to 45% of the apps in the 25 studied markets have been found containing at least one signing issue, while a large number of apps have been exposed to security vulnerabilities, attacks and compatibility issues. Among them a considerable number of apps we identified are popular apps with millions of downloads. Finally, our evolution analysis suggested that most of the issues were not mitigated after a considerable amount of time across markets. The results shed light on the emergency for detecting and repairing the app signing issues."}, "conf/msr/WangSL019": {"title": "RmvDroid: towards a reliable Android malware dataset with app metadata.", "url": "https://doi.org/10.1109/MSR.2019.00067", "year": "2019", "author": {"Haoyu Wang 0001": "50/8499-1", "Junjun Si": "124/7185", "Hao Li": "17/5705", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:A large number of research studies have been focused on detecting Android malware in recent years. As a result, a reliable and large-scale malware dataset is essential to build effective malware classifiers and evaluate the performance of different detection techniques. Although several Android malware benchmarks have been widely used in our research community, these benchmarks face several major limitations. First, most of the existing datasets are outdated and cannot reflect current malware evolution trends. Second, most of them only rely on VirusTotal to label the ground truth of malware, while some anti-virus engines on VirusTotal may not always report reliable results. Third, all of them only contain the apps themselves (apks), while other important app information (e.g., app description, user rating, and app installs) is missing, which greatly limits the usage scenarios of these datasets. In this paper, we have created a reliable Android malware dataset based on Google Play's app maintenance results over several years. We first created four snapshots of Google Play in 2014, 2015, 2017 and 2018 respectively. Then we use VirusTotal to label apps with possible sensitive behaviors, and monitor these apps on Google Play to see whether Google has removed them or not. Based on this approach, we have created a malware dataset containing 9,133 samples that belong to 56 malware families with high confidence. We believe this dataset will boost a series of research studies including Android malware detection and classification, mining apps for anomalies, and app store mining, etc."}, "conf/sigsoft/GuoWZ0X19": {"title": "AppNet: understanding app recommendation in Google Play.", "url": "https://doi.org/10.1145/3340496.3342757", "year": "2019", "author": {"Qian Guo": "22/2222", "Haoyu Wang 0001": "50/8499-1", "Chenwei Zhang": "133/3207", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": "\n\t\tWith the prevalence of smartphones, mobile apps have seen widespread adoption. Millions of apps in markets have made it difficult for users to find the most interesting and relevant apps. App markets such as Google Play have deployed app recommendation mechanisms in the markets, e.g., recommending a list of relevant apps when a user is browsing an app, which naturally forms a network of app recommendation relationships. In this work, we seek to shed light on the app relations from the perspective of market recommendation. We first build “AppNet”, a large-scale network containing over 2 million nodes (i.e., Android apps) and more than 100 million edges (i.e., the recommendation relations), by crawling Google Play. We then investigate the “AppNet” from various perspectives. Our study suggests that AppNet shares some characteristics of human networks, i.e., a large portion of the apps (more than 69%) have no incoming edges (no apps link to them), while a small group of apps dominate the network with each having thousands of incoming edges. Besides, we also reveal that roughly 147K (7%) apps form a fully connected cluster, in which most of the apps are popular apps, while covering 97% of all the edges. The results also reveal several interesting implications to both app marketers and app developers, such as identifying fraudulent app promotion behaviors, improving the recommendation system, and enhancing the exposure of apps.\n\t"}, "conf/wcre/HuWL0XH19": {"title": "Want to Earn a Few Extra Bucks? A First Look at Money-Making Apps.", "url": "https://doi.org/10.1109/SANER.2019.8668035", "year": "2019", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013", "Ren He": "40/713"}, "abstract": " Abstract:Have you ever thought of earning profits from the apps that you are using on your mobile device? It is actually achievable thanks to many so-called money-making apps, which pay app users to complete tasks such as installing another app or clicking an advertisement. To the best of our knowledge, no existing studies have investigated the characteristics of moneymaking apps. To this end, we conduct the first exploratory study to understand the features and implications of money-making apps. We first propose a semi-automated approach aiming to harvest money-making apps from Google Play and alternative app markets. Then we create a taxonomy to classify them into five categories and perform an empirical study from different aspects. Our study reveals several interesting observations: (1) moneymaking apps have become the target of malicious developers, as we found many of them expose mobile users to serious privacy and security risks. Roughly 26% of the studied apps are potentially malicious. (2) these apps have attracted millions of users, however, many users complain that they are cheated by these apps. We also revealed that ranking fraud techniques are widely used in these apps to promote the ranking of apps inside app markets. (3) these apps usually spread inappropriate and malicious contents, while unsuspicious users could get infected. Our study demonstrates the emergency for detecting and regulating this kind of apps and protect mobile users."}, "conf/wcre/ZhaoWMLLG19": {"title": "Knowledge Graphing Git Repositories: A Preliminary Study.", "url": "https://doi.org/10.1109/SANER.2019.8668034", "year": "2019", "author": {"Yanjie Zhao": "40/622", "Haoyu Wang 0001": "50/8499-1", "Lei Ma 0003": "20/6534-3", "Yuxin Liu": "11/5624", "Li Li 0029": "53/2189-29", "John Grundy 0001": "g/JohnCGrundy"}, "abstract": " Abstract:Knowledge Graph, being able to connect information from a variety of sources, has become very famous in recent years since its creation in 2012 by Google. Researchers in our community have leveraged Knowledge Graph to achieve various purposes such as improving API caveats accessibilities, generating answers to developer questions, and reasoning common software weaknesses, etc. In this work, we would like to leverage the knowledge graph concept for helping developers and project managers to comprehend software repositories. To this end, we design and implement a prototype tool called GitGraph, which takes as input a Git repository and constructs automatically a knowledge graph associated with the repository. Our preliminary experimental results show that GitGraph can correctly generate knowledge graphs for Git projects and the generated graphs are also useful for users to comprehend the projects. More specifically, the knowledge graph, on one hand, provides a graphic interface that users can interactively explore the integrated artefacts such as commits and changed methods, while on the other hand, provides a convenient means for users to search for advanced relations between the different artefacts."}, "conf/www/WangL019": {"title": "Understanding the Evolution of Mobile App Ecosystems: A Longitudinal Measurement Study of Google Play.", "url": "https://doi.org/10.1145/3308558.3313611", "year": "2019", "author": {"Haoyu Wang 0001": "50/8499-1", "Hao Li": "17/5705", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n\t\tThe continuing expansion of mobile app ecosystems has attracted lots of efforts from the research community. However, although a large number of research studies have focused on analyzing the corpus of mobile apps and app markets, little is known at a comprehensive level on the evolution of mobile app ecosystems. Because the mobile app ecosystem is continuously evolving over time, understanding the dynamics of app ecosystems could provide unique insights that cannot be achieved through studying a single static snapshot. In this paper, we seek to shed light on the dynamics of mobile app ecosystems. Based on 5.3 million app records (with both app metadata and apks) collected from three snapshots of Google Play over more than three years, we conduct the first study on the evolution of app ecosystems from different aspects. Our results suggest that although the overall ecosystem shows promising progress in regard of app popularity, user ratings, permission usage and privacy policy declaration, there still exists a considerable number of unsolved issues including malicious apps, update issues, third-party tracking threats, improper app promotion behaviors, and spamming/malicious developers. Our study shows that understanding the evolution of mobile app ecosystems can help developers make better decision on developing and releasing apps, provide insights for app markets to identifying misbehaviors, and help mobile users to choose desired apps.\n\t"}, "conf/compsac/KanWX0C18": {"title": "Towards Light-Weight Deep Learning Based Malware Detection.", "url": "https://doi.org/10.1109/COMPSAC.2018.00092", "year": "2018", "author": {"Zeliang Kan": "224/9517", "Haoyu Wang 0001": "50/8499-1", "Guoai Xu": "76/10013", "Yao Guo 0001": "07/6300-1", "Xiangqun Chen": "49/628"}, "abstract": " Abstract:The explosive amount of malware continues threating the security of operating systems and networks. Traditional malware detection approaches fail to meet the requirements of detecting polymorphic and new samples. Existing neural network based detection approaches performs better, but consuming much more time in both feature extraction and training. In this paper, we propose a light-weight PC malware detection system which is based on deep convolutional neural network (CNN). The raw inputs of our system are sequences of grouped instructions, which were generated by our Instruction Analyzer in according to different functionalities of the instructions. The network will automatically learn features of malware from the grouped instruction sequences. The experiment results suggest that in a large dataset which contains roughly 70,000 samples, our detection system can achieve an overall accuracy of 95\\%. The training time of our system with single convolutional layer was only about 10 hours, which is one order of magnitude less than traditional methods."}, "conf/imc/WangLLV0LTCX18": {"title": "Beyond Google Play: A Large-Scale Comparative Study of Chinese Android App Markets.", "url": "https://dl.acm.org/citation.cfm?id=3278558", "year": "2018", "author": {"Haoyu Wang 0001": "50/8499-1", "Zhe Liu": "70/1220", "Jingyue Liang": "228/7926", "Narseo Vallina-Rodriguez": "50/7563", "Yao Guo 0001": "07/6300-1", "Li Li 0029": "53/2189-29", "Juan Tapiador": "98/3527", "Jingcun Cao": "228/7777", "Guoai Xu": "76/10013"}, "abstract": "\n\t\tChina is one of the largest Android markets in the world. As Chinese users cannot access Google Play to buy and install Android apps, a number of independent app stores have emerged and compete in the Chinese app market. Some of the Chinese app stores are pre-installed vendor-specific app markets (e.g., Huawei, Xiaomi and OPPO), whereas others are maintained by large tech companies (e.g., Baidu, Qihoo 360 and Tencent). The nature of these app stores and the content available through them vary greatly, including their trustworthiness and security guarantees. As of today, the research community has not studied the Chinese Android ecosystem in depth. To fill this gap, we present the first large-scale comparative study that covers more than 6 million Android apps downloaded from 16 Chinese app markets and Google Play. We focus our study on catalog similarity across app stores, their features, publishing dynamics, and the prevalence of various forms of misbehavior (including the presence of fake, cloned and malicious apps). Our findings also suggest heterogeneous developer behavior across app stores, in terms of code maintenance, use of third-party services, and so forth. Overall, Chinese app markets perform substantially worse when taking active measures to protect mobile users and legit developers from deceptive and abusive actors, showing a significantly higher prevalence of malware, fake, and cloned apps than Google Play.\n\t"}, "conf/issta/0029BWK18": {"title": "CiD: automating the detection of API-related compatibility issues in Android apps.", "url": "https://doi.org/10.1145/3213846.3213857", "year": "2018", "author": {"Li Li 0029": "53/2189-29", "Tegawendé F. Bissyandé": "00/8006", "Haoyu Wang 0001": "50/8499-1", "Jacques Klein": "k/JacquesKlein"}, "abstract": "\n\t\tThe Android Application Programming Interface provides the necessary building blocks for app developers to harness the functionalities of the Android devices, including for interacting with services and accessing hardware. This API thus evolves rapidly to meet new requirements for security, performance and advanced features, creating a race for developers to update apps. Unfortunately, given the extent of the API and the lack of automated alerts on important changes, Android apps are suffered from API-related compatibility issues. These issues can manifest themselves as runtime crashes creating a poor user experience. We propose in this paper an automated approach named CiD for systematically modelling the lifecycle of the Android APIs and analysing app bytecode to flag usages that can lead to potential compatibility issues. We demonstrate the usefulness of CiD by helping developers repair their apps, and we validate that our tool outperforms the state-of-the-art on benchmark apps that take into account several challenges for automatic detection.\n\t"}, "conf/msr/WangLL0X18": {"title": "Why are Android apps removed from Google Play?: a large-scale empirical study.", "url": "https://doi.org/10.1145/3196398.3196412", "year": "2018", "author": {"Haoyu Wang 0001": "50/8499-1", "Hao Li": "17/5705", "Li Li 0029": "53/2189-29", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": "\n\t\tTo ensure the quality and trustworthiness of the apps within its app market (i.e., Google Play), Google has released a series of policies to regulate app developers. As a result, policy-violating apps (e.g., malware, low-quality apps, etc.) have been removed by Google Play periodically. In reality, we have found that the number of removed apps are actually much more than what we have expected, as almost half of all the apps have been removed or replaced from Google Play during a two year period from 2015 to 2017. However, despite the significant number of removed apps, there are almost no study on the characterization of these removed apps. To this end, this paper takes the first step to understand why Android apps are removed from Google Play, aiming at observing promising insights for both market maintainers and app developers towards building a better app ecosystem. By leveraging two app sets crawled from Google Play in 2015 (over 1.5 million) and 2017 (over 2.1 million), we have identified a set of over 790K removed apps, which are then thoroughly investigated in various aspects. The experimental results have revealed various interesting findings, as well as insights for future research directions.\n\t"}, "conf/seke/ZhangWW0X18": {"title": "Re-checking App Behavior against App Description in the Context of Third-party Libraries.", "url": "https://doi.org/10.18293/SEKE2018-180", "year": "2018", "author": {"Chengpeng Zhang": "12/10715", "Haoyu Wang 0001": "50/8499-1", "Ran Wang": "12/6277", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": ""}, "conf/sigsoft/DongWLGBLXK18": {"title": "FraudDroid: automated ad fraud detection for Android apps.", "url": "https://doi.org/10.1145/3236024.3236045", "year": "2018", "author": {"Feng Dong": "62/2555", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Yao Guo 0001": "07/6300-1", "Tegawendé F. Bissyandé": "00/8006", "Tianming Liu": "96/5013", "Guoai Xu": "76/10013", "Jacques Klein": "k/JacquesKlein"}, "abstract": "\n\t\tAlthough mobile ad frauds have been widespread, state-of-the-art approaches in the literature have mainly focused on detecting the so-called static placement frauds, where only a single UI state is involved and can be identified based on static information such as the size or location of ad views. Other types of fraud exist that involve multiple UI states and are performed dynamically while users interact with the app. Such dynamic interaction frauds, although now widely spread in apps, have not yet been explored nor addressed in the literature. In this work, we investigate a wide range of mobile ad frauds to provide a comprehensive taxonomy to the research community. We then propose, FraudDroid, a novel hybrid approach to detect ad frauds in mobile Android apps. FraudDroid analyses apps dynamically to build UI state transition graphs and collects their associated runtime network traffics, which are then leveraged to check against a set of heuristic-based rules for identifying ad fraudulent behaviours. We show empirically that FraudDroid detects ad frauds with a high precision (∼ 93%) and recall (∼ 92%). Experimental results further show that FraudDroid is capable of detecting ad frauds across the spectrum of fraud types. By analysing 12,000 ad-supported Android apps, FraudDroid identified 335 cases of fraud associated with 20 ad networks that are further confirmed to be true positive results and are shared with our fellow researchers to promote advanced ad fraud detection.\n\t"}, "conf/wmcsa/DongWLGXZ18": {"title": "How do Mobile Apps Violate the Behavioral Policy of Advertisement Libraries?", "url": "https://doi.org/10.1145/3177102.3177113", "year": "2018", "author": {"Feng Dong": "62/2555", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013", "Shaodong Zhang": "206/6693"}, "abstract": "\n\t\tAdvertisement libraries are used in almost two-thirds of apps in Google Play. To increase economic revenue, some app developers tend to entice mobile users to unexpectedly click ad views during their interaction with the app, resulting in kinds of ad fraud. Despite some popular ad providers have published behavioral policies to prevent inappropriate behaviors/practices, no previous work has studied whether mobile apps comply with those policies. In this paper, we take Google Admob as the starting point to study policy-violation apps. We first analyze the behavioral policies of Admob and create a taxonomy of policy violations. Then we propose an automated approach to detect policy-violation apps, which takes advantage of two key artifacts: an automated model-based Android GUI testing technique and a set of heuristic rules summarized from the behavior policies of Google Admob. We have applied our approach to 3,631 popular apps that have used the Admob library, and we could achieve a precision of 86% in detecting policy-violation apps. The results further show that roughly 2.5% of apps violate the policies, suggesting that behavioral policy violation is indeed a real issue in the Android advertising ecosystem.\n\t"}, "conf/icse/WangG17": {"title": "Understanding third-party libraries in mobile app analysis.", "url": "https://doi.org/10.1109/ICSE-C.2017.161", "year": "2017", "author": {"Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1"}, "abstract": " Abstract:Third-party libraries are widely used in mobile apps. Recent studies showed that third-party libraries account for more than 60% of the code in Android apps on average. As a result, program analysis on Android apps typically requires detecting or removing third-party libraries first, because they usually introduce significant noises and affect the analysis results. In this technical briefing, we will introduce the latest research advances related to third-party libraries used in mobile apps. The briefing will be focused on: (1) the importance of third-party libraries, including the current status, types and distribution, based on the analysis results on over 1 million Android apps, (2) how to detect third-party libraries from Android apps, including an overview of existing approaches and their limitations, (3) the implications of third-party libraries in software engineering tasks such as mobile app analysis, as well as case studies from the domain of program analysis and mobile security, (4) future challenges and research directions related to third-party libraries."}, "conf/www/WangLGCZXH17": {"title": "An Explorative Study of the Mobile App Ecosystem from App Developers' Perspective.", "url": "https://doi.org/10.1145/3038912.3052712", "year": "2017", "author": {"Haoyu Wang 0001": "50/8499-1", "Zhe Liu": "70/1220", "Yao Guo 0001": "07/6300-1", "Xiangqun Chen": "49/628", "Miao Zhang": "60/7041", "Guoai Xu": "76/10013", "Jason I. Hong": "h/JasonIHong"}, "abstract": "\n\t\tWith the prevalence of smartphones, app markets such as Apple App Store and Google Play has become the center stage in the mobile app ecosystem, with millions of apps developed by tens of thousands of app developers in each major market. This paper presents a study of the mobile app ecosystem from the perspective of app developers. Based on over one million Android apps and 320,000 developers from Google Play, we analyzed the Android app ecosystem from different aspects. Our analysis shows that while over half of the developers have released only one app in the market, many of them have released hundreds of apps. We classified developers into different groups based on the number of apps they have released, and compared their characteristics. Specially, we have analyzed the group of aggressive developers who have released more than 50 apps, trying to understand how and why they create so many apps. We also investigated the privacy behaviors of app developers, showing that some developers have a habit of producing apps with low privacy ratings. Our study shows that understanding the behavior of mobile developers can be helpful to not only other app developers, but also to app markets and mobile users.\n\t"}, "conf/icse/MaWGC16": {"title": "LibRadar: fast and accurate detection of third-party libraries in Android apps.", "url": "https://doi.org/10.1145/2889160.2889178", "year": "2016", "author": {"Ziang Ma": "165/9621", "Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Xiangqun Chen": "49/628"}, "abstract": "\n\t\tWe present LibRadar, a tool that is able to detect third-party libraries used in an Android app accurately and instantly. As third-party libraries are widely used in Android apps, program analysis on Android apps typically needs to detect or remove third-party libraries first in order to function correctly or provide accurate results. However, most previous studies employ a whitelist of package names of known libraries, which is incomplete and unable to deal with obfuscation. In contrast, LibRadar detects libraries based on stable API features that are obfuscation resilient in most cases. After analyzing one million free Android apps from Google Play, we have identified possible libraries and collected their unique features. Based on these features, LibRadar can detect third-party libraries in a given Android app within seconds, as it only requires simple static analysis and fast comparison. LibRadar is available for public use at http://radar.pkuos.org. The demo video is available at: https://youtu.be/GoMYjYxsZnI\n\t"}, "conf/wmcsa/LiuWGH16": {"title": "Identifying and Analyzing the Privacy of Apps for Kids.", "url": "https://doi.org/10.1145/2873587.2873597", "year": "2016", "author": {"Minxing Liu": "175/6251", "Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Jason I. Hong": "h/JasonIHong"}, "abstract": "\n\t\tOne aspect of privacy that has not been well explored is privacy for children. We present the design and evaluation of a machine learning model for predicting whether a mobile app is designed for children, which is an important step in helping to enforce the Children's Online Privacy Protection Act (COPPA). We evaluated our model on 1,728 apps from Google Play and achieved 95% accuracy. We also applied our model on a set of nearly 1 million free apps from Google Play, and identified almost 68,000 apps for kids. We then conducted a privacy analysis of the usage of third-party libraries for each app, which can help us understand some of the app's privacy-related behaviors. We believe this list can serve as a good start point for further fine-grained privacy analysis on mobile apps for children.\n\t"}, "conf/globecom/WangGTBC15": {"title": "Reevaluating Android Permission Gaps with Static and Dynamic Analysis.", "url": "https://doi.org/10.1109/GLOCOM.2014.7417621", "year": "2015", "author": {"Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Zihao Tang": "176/5858", "Guangdong Bai": "86/9673", "Xiangqun Chen": "49/628"}, "abstract": " Abstract:Recent studies on the Android permission system have found that there exists a permission gap between the requested permissions and permissions actually used in an Android app. However, current approaches face some challenges when detecting such permission gaps in Android apps due to the limitation of static analysis techniques. This paper proposes a novel approach to detect permission gaps in Android apps and determine the precise set of permissions that an app needs to run correctly. Our approach includes a static analysis technique to extract permission usage information from API invocations, and a dynamic testing technique to test and monitor the runtime permission usage behaviors of apps. By combining static analysis and dynamic testing, our approach can detect significantly more permission usage information compared to static analysis, indicating that our approach could improve the detection accuracy and reduce the false positives in permission gap detection. We have implemented a prototype to study more than 1,000 popular apps from Google Play. The results show that our approach could detect on average 30% more permissions that are used in apps, while more than 8% of the overprivileged apps detected by previous approaches are false positives."}, "conf/huc/WangHG15": {"title": "Using text mining to infer the purpose of permission use in mobile apps.", "url": "https://doi.org/10.1145/2750858.2805833", "year": "2015", "author": {"Haoyu Wang 0001": "50/8499-1", "Jason I. Hong": "h/JasonIHong", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n\t\tUnderstanding the purpose of why sensitive data is used could help improve privacy as well as enable new kinds of access control. In this paper, we introduce a new technique for inferring the purpose of sensitive data usage in the context of Android smartphone apps. We extract multiple kinds of features from decompiled code, focusing on app-specific features and text-based features. These features are then used to train a machine learning classifier. We have evaluated our approach in the context of two sensitive permissions, namely ACCESS_FINE_LOCATION and READ_CONTACT_LIST, and achieved an accuracy of about 85% and 94% respectively in inferring purposes. We have also found that text-based features alone are highly effective in inferring purposes.\n\t"}, "conf/issta/WangGMC15": {"title": "WuKong: a scalable and accurate two-phase approach to Android app clone detection.", "url": "https://doi.org/10.1145/2771783.2771795", "year": "2015", "author": {"Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Ziang Ma": "165/9621", "Xiangqun Chen": "49/628"}, "abstract": "\n\t\t Repackaged Android applications (app clones) have been found in many third-party markets, which not only compromise the copyright of original authors, but also pose threats to security and privacy of mobile users. Both fine-grained and coarse-grained approaches have been proposed to detect app clones. However, fine-grained techniques employing complicated clone detection algorithms are difficult to scale to hundreds of thousands of apps, while coarse-grained techniques based on simple features are scalable but less accurate. This paper proposes WuKong, a two-phase detection approach that includes a coarse-grained detection phase to identify suspicious apps by comparing light-weight static semantic features, and a fine-grained phase to compare more detailed features for only those apps found in the first phase. To further improve the detection speed and accuracy, we also introduce an automated clustering-based preprocessing step to filter third-party libraries before conducting app clone detection. Experiments on more than 100,000 Android apps collected from five Android markets demonstrate the effectiveness and scalability of our approach. \n\t"}, "conf/www/WangLGC14": {"title": "Similarity-based web browser optimization.", "url": "https://doi.org/10.1145/2566486.2567971", "year": "2014", "author": {"Haoyu Wang 0001": "50/8499-1", "Mengxin Liu": "143/9444", "Yao Guo 0001": "07/6300-1", "Xiangqun Chen": "49/628"}, "abstract": "\n\t\tThe performance of web browsers has become a major bottleneck when dealing with complex webpages. Many calculation redundancies exist when processing similar webpages, thus it is possible to cache and reuse previously calculated intermediate results to improve web browser performance significantly. In this paper, we propose a similarity-based optimization approach to improve webpage processing performance of web browsers. Through caching and reusing of style properties calculated previously, we are able to eliminate the redundancies caused by processing similar webpages from the same website. We propose a tree-structured architecture to store style properties to facilitate efficient caching and reuse. Experiments on webpages of various websites show that the proposed technique can speed up the webpage loading process by up to 68% and reduce the redundant style calculations by up to 77% for the first visit to a webpage with almost negligible overhead.\n\t"}, "conf/sose/WangKGC13": {"title": "Mobile Web Browser Optimizations in the Cloud Era: A Survey.", "url": "https://doi.org/10.1109/SOSE.2013.18", "year": "2013", "author": {"Haoyu Wang 0001": "50/8499-1", "Junjun Kong": "17/6898", "Yao Guo 0001": "07/6300-1", "Xiangqun Chen": "49/628"}, "abstract": " Abstract:As most mobile devices are capable of accessing the Internet with a mobile web browser, the performance of mobile web browsers has become an interesting research topic recently. Due to network bandwidth and processing power limitations, mobile web browsers are slower compared to PC web browsers when dealing with large-size web contents and computation-intensive operations. In order to improve the performance of web browsers, researchers have attempted different techniques, including parallel optimization, web page prefetching, speculative loading, etc. With the introduction of mobile cloud computing, the performance of mobile devices can be augmented with the capability of the cloud. Mobile web browsers can also benefit from mobile cloud computing to improve the responsiveness and energy efficiency. This paper surveys current issues of mobile web browsers and approaches to optimize mobile web browsers, including client side approaches and cloud-based approaches. We also discuss the challenges and future directions in mobile web browser optimization."}, "journals/pomacs/WangWHTMLL22": {"title": "MalRadar: Demystifying Android Malware in the New Era.", "url": "https://doi.org/10.1145/3530906", "year": "2022", "author": {"Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1", "Ren He": "40/713", "Ran Tao": "99/955", "Guozhu Meng": "134/8681", "Xiapu Luo": "53/1565", "Xuanzhe Liu": "08/2161"}, "abstract": "Mobile malware detection has attracted massive research effort in our community. A reliable and up-to-date malware dataset is critical to evaluate the effectiveness of malware detection approaches. Essentially, the malware ground truth should be manually verified by security experts, and their malicious behaviors should be carefully labelled. Although there are several widely-used malware benchmarks in our community (e.g., MalGenome, Drebin, Piggybacking and AMD, etc.), these benchmarks face several limitations including out-of-date, size, coverage, and reliability issues, etc. In this paper, we first make efforts to create MalRadar, a growing and up-to-date Android malware dataset using the most reliable way, i.e., by collecting malware based on the analysis reports of security experts. We have crawled all the mobile security related reports released by ten leading security companies, and used an automated approach to extract and label the useful ones describing new Android malware and containing Indicators of Compromise (IoC) information. We have successfully compiled MalRadar, a dataset that contains 4,534 unique Android malware samples (including both apks and metadata) released from 2014 to April 2021 by the time of this paper, all of which were manually verified by security experts with detailed behavior analysis. Then we characterize the MalRadar dataset from malware distribution channels, app installation methods, malware activation, malicious behaviors and anti-analysis techniques. We further investigate the malware evolution over the last decade. At last, we measure the effectiveness of commercial anti-virus engines and malware detection techniques on detecting malware in MalRadar. Our dataset can be served as the representative Android malware benchmark in the new era, and our observations can positively contribute to the community and boost a series of research studies on mobile security."}, "journals/tdsc/LiuXSGWXWLH22": {"title": "Make Web3.0 Connected.", "url": "https://doi.org/10.1109/TDSC.2021.3079315", "year": "2022", "author": {"Zhuotao Liu": "69/11514", "Yangxi Xiang": "247/9496", "Jian Shi": "78/4266", "Peng Gao 0008": "29/5999-8", "Haoyu Wang 0001": "50/8499-1", "Xusheng Xiao": "13/9656", "Bihan Wen": "158/9840", "Qi Li 0002": "181/2688-2", "Yih-Chun Hu": "51/6805"}, "abstract": " Abstract:{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n, often cited to drastically shape our lives, is ubiquitous. However, few literatures have discussed the crucial differentiators that separate \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n from the era we are currently living in. Via a thorough analysis of the recent blockchain infrastructure evolution, we capture a key invariant featuring the evolution, based on which we provide the first academic definition for \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n. Our definition is not the only way of understanding \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n, yet, it captures the fundamental and defining trait of \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n, and meanwhile it is has two desirable properties. Under this definition, we articulate three key categories of infrastructural enablers for \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n: individual smart-contract capable blockchains, federated or centralized platforms capable of publishing verifiable states, and an interoperability platform to hyperconnect those state publishers to provide a unified and connected computing platform for \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n applications. While innovations in all categories are necessary to fully enable \n{\\mathsf Web3.0}Web3.0{\\mathsf Web3.0}\n, in this article, we present a design for the third enabler, i.e., the first interoperability platform, namely \n{\\mathsf HyperService}HyperService{\\mathsf HyperService}\n, that advances the state-of-the-art by simultaneously delivers \ninteroperability\n and \nprogrammability\n across \nheterogeneous\n blockchains and state publishers. \n{\\mathsf HyperService}HyperService{\\mathsf HyperService}\n is powered by two innovative designs: \n{\\mathsf (i)}(i){\\mathsf (i)}\n a developer-facing programming framework that allows developers to build cross-chain applications in a unified programming model; and \n{\\mathsf (ii)}(ii){\\mathsf (ii)}\n a secure blockchain-facing cryptography protocol that provably realizes those applications on blockchains. We implement a prototype of \n{\\mathsf HyperService}HyperService{\\mathsf HyperService}\n in approximately 62,000 lines of code to demonstrate its practicality, usability and scalability."}, "journals/tse/TangWZLZZYSK22": {"title": "A Systematical Study on Application Performance Management Libraries for Apps.", "url": "https://doi.org/10.1109/TSE.2021.3077654", "year": "2022", "author": {"Yutian Tang": "120/1174", "Haoyu Wang 0001": "50/8499-1", "Xian Zhan": "154/0904", "Xiapu Luo": "53/1565", "Yajin Zhou": "15/7381", "Hao Zhou": "63/778", "Qiben Yan": "86/10809", "Yulei Sui": "58/10567", "Jacky Keung": "86/7853"}, "abstract": " Abstract:Being able to automatically detect the performance issues in apps can significantly improve apps’ quality as well as having a positive influence on user satisfaction. \nA\npplication \nP\nerformance \nM\nanagement (APM) libraries are used to locate the apps’ performance bottleneck, monitor their behaviors at runtime, and identify potential security risks. Although app developers have been exploiting application performance management (APM) tools to capture these potential performance issues, most of them do not fully understand the internals of these APM tools and the effect on their apps. To fill this gap, in this paper, we conduct the first systematic study on APMs for apps by scrutinizing 25 widely-used APMs for Android apps and develop a framework named APMHunter for exploring the usage of APMs in Android apps. Using APMHunter, we conduct a large-scale empirical study on 500,000 Android apps to explore the usage patterns of APMs and discover the potential misuses of APMs. We obtain two major findings: 1) some APMs still employ deprecated permissions and approaches, which makes APMs fail to perform as expected; 2) inappropriate use of APMs can cause privacy leaks. Thus, our study suggests that both APM vendors and developers should design and use APMs scrupulously."}, "journals/ese/WangHWXLWZLSGX21": {"title": "Beyond the virus: a first look at coronavirus-themed Android malware.", "url": "https://doi.org/10.1007/s10664-021-09974-4", "year": "2021", "author": {"Liu Wang 0002": "10/3099-2", "Ren He": "40/713", "Haoyu Wang 0001": "50/8499-1", "Pengcheng Xia": "197/8181", "Yuanchun Li": "87/4523", "Lei Wu 0012": "68/5597-12", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Yulei Sui": "58/10567", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": "As the COVID-19 pandemic emerged in early 2020, a number of malicious actors have started capitalizing the topic. Although a few media reports mentioned the existence of coronavirus-themed mobile malware, the research community lacks the understanding of the landscape of the coronavirus-themed mobile malware. In this paper, we present the first systematic study of coronavirus-themed Android malware. We first make efforts to create a daily growing COVID-19 themed mobile app dataset, which contains 4,322 COVID-19 themed apk samples (2,500 unique apps) and 611 potential malware samples (370 unique malicious apps) by the time of mid-November, 2020. We then present an analysis of them from multiple perspectives including trends and statistics, installation methods, malicious behaviors and malicious actors behind them. We observe that the COVID-19 themed apps as well as malicious ones began to flourish almost as soon as the pandemic broke out worldwide. Most malicious apps are camouflaged as benign apps using the same app identifiers (e.g., app name, package name and app icon). Their main purposes are either stealing users’ private information or making profit by using tricks like phishing and extortion. Furthermore, only a quarter of the COVID-19 malware creators are habitual developers who have been active for a long time, while 75% of them are newcomers in this pandemic. The malicious developers are mainly located in the US, mostly targeting countries including English-speaking countries, China, Arabic countries and Europe. To facilitate future research, we have publicly released all the well-labelled COVID-19 themed apps (and malware) to the research community. Till now, over 30 research institutes around the world have requested our dataset for COVID-19 themed research."}, "journals/pomacs/ChenLSHWWL21": {"title": "SADPonzi: Detecting and Characterizing Ponzi Schemes in Ethereum Smart Contracts.", "url": "https://doi.org/10.1145/3460093", "year": "2021", "author": {"Weimin Chen": "35/966", "Xinran Li": "57/10368", "Yuting Sui": "294/1625", "Ningyu He": "228/1460", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Xiapu Luo": "53/1565"}, "abstract": "Ponzi schemes are financial scams that lure users under the promise of high profits. With the prosperity of Bitcoin and blockchain technologies, there has been growing anecdotal evidence that this classic fraud has emerged in the blockchain ecosystem. Existing studies have proposed machine-learning based approaches for detecting Ponzi schemes, i.e., either based on the operation codes (opcodes) of the smart contract binaries or the transaction patterns of addresses. However, state-of-the-art approaches face several major limitations, including lacking interpretability and high false positive rates. Moreover, machine-learning based methods are susceptible to evasion techniques, and transaction-based techniques do not work on smart contracts that have a small number of transactions. These limitations render existing methods for detecting Ponzi schemes ineffective. In this paper, we propose SADPonzi, a semantic-aware detection approach for identifying Ponzi schemes in Ethereum smart contracts. Specifically, by strictly following the definition of Ponzi schemes, we propose a heuristic-guided symbolic execution technique to first generate the semantic information for each feasible path in smart contracts and then identify investor-related transfer behaviors and the distribution strategies adopted. Experimental result on a well-labelled benchmark suggests that SADPonzi can achieve 100% precision and recall, outperforming all existing machine-learning based techniques. We further apply SADPonzi to all 3.4 million smart contracts deployed by EOAs in Ethereum and identify 835 Ponzi scheme contracts, with over 17 million US Dollars invested by victims. Our observations confirm the urgency of identifying and mitigating Ponzi schemes in the blockchain ecosystem."}, "journals/pomacs/XiaWGSYLZXX21": {"title": "Trade or Trick?: Detecting and Characterizing Scam Tokens on Uniswap Decentralized Exchange.", "url": "https://doi.org/10.1145/3491051", "year": "2021", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Bingyu Gao": "260/6730", "Weihang Su": "301/7966", "Zhou Yu": "83/3205", "Xiapu Luo": "53/1565", "Chao Zhang 0008": "94/3019-8", "Xusheng Xiao": "13/9656", "Guoai Xu": "76/10013"}, "abstract": "The prosperity of the cryptocurrency ecosystem drives the need for digital asset trading platforms. Beyond centralized exchanges (CEXs), decentralized exchanges (DEXs) are introduced to allow users to trade cryptocurrency without transferring the custody of their digital assets to the middlemen, thus eliminating the security and privacy issues of traditional CEX. Uniswap, as the most prominent cryptocurrency DEX, is continuing to attract scammers, with fraudulent cryptocurrencies flooding in the ecosystem. In this paper, we take the first step to detect and characterize scam tokens on Uniswap. We first collect all the transactions related to Uniswap V2 exchange and investigate the landscape of cryptocurrency trading on Uniswap from different perspectives. Then, we propose an accurate approach for flagging scam tokens on Uniswap based on a guilt-by-association heuristic and a machine-learning powered technique. We have identified over 10K scam tokens listed on Uniswap, which suggests that roughly 50% of the tokens listed on Uniswap are scam tokens. All the scam tokens and liquidity pools are created specialized for the \"rug pull\" scams, and some scam tokens have embedded tricks and backdoors in the smart contracts. We further observe that thousands of collusion addresses help carry out the scams in league with the scam token/pool creators. The scammers have gained a profit of at least $16 million from 39,762 potential victims. Our observations in this paper suggest the urgency to identify and stop scams in the decentralized finance ecosystem, and our approach can act as a whistleblower that identifies scam tokens at their early stages."}, "journals/tdsc/HuWZGLLX21": {"title": "Dating with Scambots: Understanding the Ecosystem of Fraudulent Dating Applications.", "url": "https://doi.org/10.1109/TDSC.2019.2908939", "year": "2021", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Yajin Zhou": "15/7381", "Yao Guo 0001": "07/6300-1", "Li Li 0029": "53/2189-29", "Bingxuan Luo": "223/4368", "Fangren Xu": "223/4675"}, "abstract": " Abstract:In this work, we are focusing on a new and yet uncovered way for malicious apps to gain profit. They claim to be dating apps. However, their sole purpose is to lure users into purchasing premium/VIP services to start conversations with other (likely fake female) accounts in the app. We call these apps as fraudulent dating apps. This paper performs a systematic study to understand the whole ecosystem of fraudulent dating apps. Specifically, we have proposed a three-phase method to detect them and subsequently comprehend their characteristics via analyzing the existing account profiles. Our observation reveals that most of the accounts are not managed by real persons, but by chatbots based on predefined conversation templates. We also analyze the business model of these apps and reveal that multiple parties are actually involved in the ecosystem, including producers who develop apps, publishers who publish apps to gain profit, and the distribution network that is responsible for distributing apps to end users. Finally, we analyze the impact of them to users (i.e., victims) and estimate the overall revenue. Our work is the first systematic study on fraudulent dating apps, and the results demonstrate the urge for a solution to protect users."}, "journals/tosem/ChengWHXS21": {"title": "DeepWukong: Statically Detecting Software Vulnerabilities Using Deep Graph Neural Network.", "url": "https://doi.org/10.1145/3436877", "year": "2021", "author": {"Xiao Cheng": "73/1713", "Haoyu Wang 0001": "50/8499-1", "Jiayi Hua": "251/9425", "Guoai Xu": "76/10013", "Yulei Sui": "58/10567"}, "abstract": "Static bug detection has shown its effectiveness in detecting well-defined memory errors, e.g., memory leaks, buffer overflows, and null dereference. However, modern software systems have a wide variety of vulnerabilities. These vulnerabilities are extremely complicated with sophisticated programming logic, and these bugs are often caused by different bad programming practices, challenging existing bug detection solutions. It is hard and labor-intensive to develop precise and efficient static analysis solutions for different types of vulnerabilities, particularly for those that may not have a clear specification as the traditional well-defined vulnerabilities.This article presents DeepWukong, a new deep-learning-based embedding approach to static detection of software vulnerabilities for C/C++ programs. Our approach makes a new attempt by leveraging advanced recent graph neural networks to embed code fragments in a compact and low-dimensional representation, producing a new code representation that preserves high-level programming logic (in the form of control- and data-flows) together with the natural language information of a program. Our evaluation studies the top 10 most common C/C++ vulnerabilities during the past 3 years. We have conducted our experiments using 105,428 real-world programs by comparing our approach with four well-known traditional static vulnerability detectors and three state-of-the-art deep-learning-based approaches. The experimental results demonstrate the effectiveness of our research and have shed light on the promising direction of combining program analysis with deep learning techniques to address the general static code analysis challenges."}, "journals/tosem/ZhaoLWCBKG21": {"title": "On the Impact of Sample Duplication in Machine-Learning-Based Android Malware Detection.", "url": "https://doi.org/10.1145/3446905", "year": "2021", "author": {"Yanjie Zhao": "40/622", "Li Li 0029": "53/2189-29", "Haoyu Wang 0001": "50/8499-1", "Haipeng Cai": "117/7062", "Tegawendé F. Bissyandé": "00/8006", "Jacques Klein": "k/JacquesKlein", "John C. Grundy": "g/JohnCGrundy"}, "abstract": "Malware detection at scale in the Android realm is often carried out using machine learning techniques. State-of-the-art approaches such as DREBIN and MaMaDroid are reported to yield high detection rates when assessed against well-known datasets. Unfortunately, such datasets may include a large portion of duplicated samples, which may bias recorded experimental results and insights. In this article, we perform extensive experiments to measure the performance gap that occurs when datasets are de-duplicated. Our experimental results reveal that duplication in published datasets has a limited impact on supervised malware classification models. This observation contrasts with the finding of Allamanis on the general case of machine learning bias for big code. Our experiments, however, show that sample duplication more substantially affects unsupervised learning models (e.g., malware family clustering). Nevertheless, we argue that our fellow researchers and practitioners should always take sample duplication into consideration when performing machine-learning-based (via either supervised or unsupervised learning) Android malware detections, no matter how significant the impact might be."}, "journals/corr/abs-2101-04930": {"title": "An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications.", "url": "https://arxiv.org/abs/2101.04930", "year": "2021", "author": {"Zhenpeng Chen": "200/8104", "Huihan Yao": "283/5859", "Yiling Lou": "174/3394", "Yanbin Cao": "232/2125", "Yuanqiang Liu": "232/2330", "Haoyu Wang 0001": "50/8499-1", "Xuanzhe Liu": "08/2161"}, "abstract": "\n      Abstract:  Deep Learning (DL) is finding its way into a growing number of mobile\nsoftware applications. These software applications, named as DL based mobile\napplications (abbreviated as mobile DL apps) integrate DL models trained using\nlarge-scale data with DL programs. A DL program encodes the structure of a\ndesirable DL model and the process by which the model is trained using training\ndata. Due to the increasing dependency of current mobile apps on DL, software\nengineering (SE) for mobile DL apps has become important. However, existing\nefforts in SE research community mainly focus on the development of DL models\nand extensively analyze faults in DL programs. In contrast, faults related to\nthe deployment of DL models on mobile devices (named as deployment faults of\nmobile DL apps) have not been well studied. Since mobile DL apps have been used\nby billions of end users daily for various purposes including for\nsafety-critical scenarios, characterizing their deployment faults is of\nenormous importance. To fill the knowledge gap, this paper presents the first\ncomprehensive study on the deployment faults of mobile DL apps. We identify 304\nreal deployment faults from Stack Overflow and GitHub, two commonly used data\nsources for studying software faults. Based on the identified faults, we\nconstruct a fine-granularity taxonomy consisting of 23 categories regarding to\nfault symptoms and distill common fix strategies for different fault types.\nFurthermore, we suggest actionable implications and research avenues that could\nfurther facilitate the deployment of DL models on mobile devices.\n\n    "}, "journals/corr/abs-2101-06896": {"title": "DeepPayload: Black-box Backdoor Attack on Deep Learning Models through Neural Payload Injection.", "url": "https://arxiv.org/abs/2101.06896", "year": "2021", "author": {"Yuanchun Li": "87/4523", "Jiayi Hua": "251/9425", "Haoyu Wang 0001": "50/8499-1", "Chunyang Chen": "180/7246", "Yunxin Liu": "55/3521"}, "abstract": "\n      Abstract:  Deep learning models are increasingly used in mobile applications as critical\ncomponents. Unlike the program bytecode whose vulnerabilities and threats have\nbeen widely-discussed, whether and how the deep learning models deployed in the\napplications can be compromised are not well-understood since neural networks\nare usually viewed as a black box. In this paper, we introduce a highly\npractical backdoor attack achieved with a set of reverse-engineering techniques\nover compiled deep learning models. The core of the attack is a neural\nconditional branch constructed with a trigger detector and several operators\nand injected into the victim model as a malicious payload. The attack is\neffective as the conditional logic can be flexibly customized by the attacker,\nand scalable as it does not require any prior knowledge from the original\nmodel. We evaluated the attack effectiveness using 5 state-of-the-art deep\nlearning models and real-world samples collected from 30 users. The results\ndemonstrated that the injected backdoor can be triggered with a success rate of\n93.5%, while only brought less than 2ms latency overhead and no more than 1.4%\naccuracy decrease. We further conducted an empirical study on real-world mobile\ndeep learning apps collected from Google Play. We found 54 apps that were\nvulnerable to our attack, including popular and security-critical ones. The\nresults call for the awareness of deep learning application developers and\nauditors to enhance the protection of deployed models.\n\n    "}, "journals/corr/abs-2102-06528": {"title": "A Tale of Two Countries: A Longitudinal Cross-Country Study of Mobile Users' Reactions to the COVID-19 Pandemic Through the Lens of App Popularity.", "url": "https://arxiv.org/abs/2102.06528", "year": "2021", "author": {"Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1", "Yi Wang": "17/221", "Gareth Tyson": "85/85", "Fei Lyu 0001": "86/7981"}, "abstract": "\n      Abstract:  The ongoing COVID-19 pandemic has profoundly impacted people's life around\nthe world, including how they interact with mobile technologies. In this paper,\nwe seek to develop an understanding of how the dynamic trajectory of a pandemic\nshapes mobile phone users' experiences. Through the lens of app popularity, we\napproach this goal from a cross-country perspective. We compile a dataset\nconsisting of six-month daily snapshots of the most popular apps in the iOS App\nStore in China and the US, where the pandemic has exhibited distinct\ntrajectories. Using this longitudinal dataset, our analysis provides detailed\npatterns of app ranking during the pandemic at both category and individual app\nlevels. We reveal that app categories' rankings are correlated with the\npandemic, contingent upon country-specific development trajectories. Our work\noffers rich insights into how the COVID-19, a typical global public health\ncrisis, has influence people's day-to-day interaction with the Internet and\nmobile technologies.\n\n    "}, "journals/corr/abs-2103-00712": {"title": "CHAMP: Characterizing Undesired App Behaviors from User Comments based on Market Policies.", "url": "https://arxiv.org/abs/2103.00712", "year": "2021", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Tiantong Ji": "286/8193", "Xusheng Xiao": "13/9656", "Xiapu Luo": "53/1565", "Peng Gao 0008": "29/5999-8", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n      Abstract:  Millions of mobile apps have been available through various app markets.\nAlthough most app markets have enforced a number of automated or even manual\nmechanisms to vet each app before it is released to the market, thousands of\nlow-quality apps still exist in different markets, some of which violate the\nexplicitly specified market this http URL order to identify these violations\naccurately and timely, we resort to user comments, which can form an immediate\nfeedback for app market maintainers, to identify undesired behaviors that\nviolate market policies, including security-related user concerns.\nSpecifically, we present the first large-scale study to detect and characterize\nthe correlations between user comments and market policies. First, we propose\nCHAMP, an approach that adopts text mining and natural language processing\n(NLP) techniques to extract semantic rules through a semi-automated process,\nand classifies comments into 26 pre-defined types of undesired behaviors that\nviolate market policies. Our evaluation on real-world user comments shows that\nit achieves both high precision and recall ($>0.9$) in classifying comments for\nundesired behaviors. Then, we curate a large-scale comment dataset (over 3\nmillion user comments) from apps in Google Play and 8 popular alternative\nAndroid app markets, and apply CHAMP to understand the characteristics of\nundesired behavior comments in the wild. The results confirm our speculation\nthat user comments can be used to pinpoint suspicious apps that violate\npolicies declared by app markets. The study also reveals that policy violations\nare widespread in many app markets despite their extensive vetting efforts.\nCHAMP can be a \\textit{whistle blower} that assigns policy-violation scores and\nidentifies most informative comments for apps.\n\n    "}, "journals/corr/abs-2103-11286": {"title": "A Systematical Study on Application Performance Management Libraries for Apps.", "url": "https://arxiv.org/abs/2103.11286", "year": "2021", "author": {"Yutian Tang": "120/1174", "Haoyu Wang 0001": "50/8499-1", "Xian Zhan": "154/0904", "Xiapu Luo": "53/1565", "Yajin Zhou": "15/7381", "Hao Zhou": "63/778", "Qiben Yan": "86/10809", "Yulei Sui": "58/10567", "Jacky Keung": "86/7853"}, "abstract": "\n      Abstract:  Being able to automatically detect the performance issues in apps can\nsignificantly improve apps' quality as well as having a positive influence on\nuser satisfaction. Application Performance Management (APM) libraries are used\nto locate the apps' performance bottleneck, monitor their behaviors at runtime,\nand identify potential security risks. Although app developers have been\nexploiting application performance management (APM) tools to capture these\npotential performance issues, most of them do not fully understand the\ninternals of these APM tools and the effect on their apps. To fill this gap, in\nthis paper, we conduct the first systematic study on APMs for apps by\nscrutinizing 25 widely-used APMs for Android apps and develop a framework named\nAPMHunter for exploring the usage of APMs in Android apps. Using APMHunter, we\nconduct a large-scale empirical study on 500,000 Android apps to explore the\nusage patterns of APMs and discover the potential misuses of APMs. We obtain\ntwo major findings: 1) some APMs still employ deprecated permissions and\napproaches, which makes APMs fail to perform as expected; 2) inappropriate use\nof APMs can cause privacy leaks. Thus, our study suggests that both APM vendors\nand developers should design and use APMs scrupulously.\n\n    "}, "journals/corr/abs-2104-05185": {"title": "Ethereum Name Service: the Good, the Bad, and the Ugly.", "url": "https://arxiv.org/abs/2104.05185", "year": "2021", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Zhou Yu": "83/3205", "Xinyu Liu": "98/738", "Xiapu Luo": "53/1565", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  DNS has always been criticized for its inherent design flaws, making the\nsystem vulnerable to kinds of attacks. Besides, DNS domain names are not fully\ncontrolled by the users, which can be easily taken down by the authorities and\nregistrars. Since blockchain has its unique properties like immutability and\ndecentralization, it seems to be promising to build a decentralized name\nservice on blockchain. Ethereum Name Service (ENS), as a novel name service\nbuilt atop Etheruem, has received great attention from the community. Yet, no\nexisting work has systematically studied this emerging system, especially the\nsecurity issues and misbehaviors in ENS. To fill the void, we present the first\nlarge-scale study of ENS by collecting and analyzing millions of event logs\nrelated to ENS. We characterize the ENS system from a number of perspectives.\nOur findings suggest that ENS is showing gradually popularity during its four\nyears' evolution, mainly due to its distributed and open nature that ENS domain\nnames can be set to any kinds of records, even censored and malicious contents.\nWe have identified several security issues and misbehaviors including\ntraditional DNS security issues and new issues introduced by ENS smart\ncontracts. Attackers are abusing the system with thousands of squatting ENS\nnames, a number of scam blockchain addresses and malicious websites, etc. Our\nexploration suggests that our community should invest more effort into the\ndetection and mitigation of issues in Blockchain-based Name Services towards\nbuilding an open and trustworthy name service.\n\n    "}, "journals/corr/abs-2108-01964": {"title": "A Systematic Assessment on Android Third-party Library Detection Tools.", "url": "https://arxiv.org/abs/2108.01964", "year": "2021", "author": {"Xian Zhan": "154/0904", "Tianming Liu": "96/5013", "Yepang Liu 0001": "125/1824", "Yang Liu 0003": "51/3710-3", "Li Li 0029": "53/2189-29", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565"}, "abstract": "\n      Abstract:  Third-party libraries (TPLs) have become a significant part of the Android\necosystem. Developers can employ various TPLs to facilitate their app\ndevelopment. Unfortunately, the popularity of TPLs also brings new security\nissues. For example, TPLs may carry malicious or vulnerable code, which can\ninfect popular apps to pose threats to mobile users. Furthermore, TPL detection\nis essential for downstream tasks, such as vulnerabilities and malware\ndetection. Thus, various tools have been developed to identify TPLs. However,\nno existing work has studied these TPL detection tools in detail, and different\ntools focus on different applications and techniques with performance\ndifferences. A comprehensive understanding of these tools will help us make\nbetter use of them. To this end, we conduct a comprehensive empirical study to\nfill the gap by evaluating and comparing all publicly available TPL detection\ntools based on six criteria: accuracy of TPL construction, effectiveness,\nefficiency, accuracy of version identification, resiliency to code obfuscation,\nand ease of use. Besides, we enhance these open-source tools by fixing their\nlimitations, to improve their detection ability. Finally, we build an\nextensible framework that integrates all existing available TPL detection\ntools, providing an online service for the research community. We release the\nevaluation dataset and enhanced tools. According to our study, we also present\nthe essential findings and discuss promising implications to the community. We\nbelieve our work provides a clear picture of existing TPL detection techniques\nand also gives a roadmap for future research.\n\n    "}, "journals/corr/abs-2109-00229": {"title": "Demystifying Scam Tokens on Uniswap Decentralized Exchange.", "url": "https://arxiv.org/abs/2109.00229", "year": "2021", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Bingyu Gao": "260/6730", "Weihang Su": "301/7966", "Zhou Yu": "83/3205", "Xiapu Luo": "53/1565", "Chao Zhang 0008": "94/3019-8", "Xusheng Xiao": "13/9656", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  The prosperity of the cryptocurrency ecosystem drives the need for digital\nasset trading platforms. Beyond centralized exchanges (CEXs), decentralized\nexchanges (DEXs) are introduced to allow users to trade cryptocurrency without\ntransferring the custody of their digital assets to the middlemen, thus\neliminating the security and privacy issues of traditional CEX. Uniswap, as the\nmost prominent cryptocurrency DEX, is continuing to attract scammers, with\nfraudulent cryptocurrencies flooding in the ecosystem. In this paper, we take\nthe first step to detect and characterize scam tokens on Uniswap. We first\ncollect all the transactions related to Uniswap V2 exchange and investigate the\nlandscape of cryptocurrency trading on Uniswap from different perspectives.\nThen, we propose an accurate approach for flagging scam tokens on Uniswap based\non a guilt-by-association heuristic and a machine-learning powered technique.\nWe have identified over 10K scam tokens listed on Uniswap, which suggests that\nroughly 50% of the tokens listed on Uniswap are scam tokens. All the scam\ntokens and liquidity pools are created specialized for the \"rug pull\" scams,\nand some scam tokens have embedded tricks and backdoors in the smart contracts.\nWe further observe that thousands of collusion addresses help carry out the\nscams in league with the scam token/pool creators. The scammers have gained a\nprofit of at least \\$16 million from 39,762 potential victims. Our observations\nin this paper suggest the urgency to identify and stop scams in the\ndecentralized finance ecosystem, and our approach can act as a whistleblower\nthat identifies scam tokens at their early stages.\n\n    "}, "journals/corr/abs-2110-07534": {"title": "Understanding the Evolution of Blockchain Ecosystems: A Longitudinal Measurement Study of Bitcoin, Ethereum, and EOSIO.", "url": "https://arxiv.org/abs/2110.07534", "year": "2021", "author": {"Ningyu He": "228/1460", "Weihang Su": "301/7966", "Zhou Yu": "83/3205", "Xinyu Liu": "98/738", "Fengyi Zhao": "304/3432", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Gareth Tyson": "85/85", "Lei Wu 0012": "68/5597-12", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n      Abstract:  The continuing expansion of the blockchain ecosystems has attracted much\nattention from the research community. However, although a large number of\nresearch studies have been proposed to understand the diverse characteristics\nof individual blockchain systems (e.g., Bitcoin or Ethereum), little is known\nat a comprehensive level on the evolution of blockchain ecosystems at scale,\nlongitudinally, and across multiple blockchains. We argue that understanding\nthe dynamics of blockchain ecosystems could provide unique insights that cannot\nbe achieved through studying a single static snapshot or a single blockchain\nnetwork alone. Based on billions of transaction records collected from three\nrepresentative and popular blockchain systems (Bitcoin, Ethereum and EOSIO)\nover 10 years, we conduct the first study on the evolution of multiple\nblockchain ecosystems from different perspectives. Our exploration suggests\nthat, although the overall blockchain ecosystem shows promising growth over the\nlast decade, a number of worrying outliers exist that have disrupted its\nevolution.\n\n    "}, "journals/compsec/XiaWZJGWLX20": {"title": "Characterizing cryptocurrency exchange scams.", "url": "https://doi.org/10.1016/j.cose.2020.101993", "year": "2020", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Bowen Zhang": "85/7433", "Ru Ji": "260/7114", "Bingyu Gao": "260/6730", "Lei Wu 0012": "68/5597-12", "Xiapu Luo": "53/1565", "Guoai Xu": "76/10013"}, "abstract": "As the indispensable trading platforms of the ecosystem, hundreds of cryptocurrency exchanges are emerging to facilitate the trading of digital assets. While, it also attracts the attention of attackers. A number of scam attacks were reported targeting cryptocurrency exchanges, leading to a huge amount of financial loss. However, no previous work in the research community has systematically studied this problem. This paper makes the first effort to identify and characterize the cryptocurrency exchange scams. First, over 1500 scam domains and over 300 fake apps are identified, by collecting existing reports and using typosquatting generation techniques. Then, by investigating the relationship between the scam domains and fake apps, this paper identifies 94 scam domain families and 30 fake app families. By further characterizing the impacts of such scams, it is revealed that these scams have incurred financial loss of 520k US dollars at least. It is further observed that the fake apps have been sneaked to major app markets (including Google Play) to infect unsuspicious users. The findings in this paper demonstrate the urgency to identify and prevent cryptocurrency exchange scams. To facilitate future research, all the identified scam domains and fake apps have been publicly released to the research community."}, "journals/pacmpl/SuiCZ020": {"title": "Flow2Vec: value-flow-based precise code embedding.", "url": "https://doi.org/10.1145/3428301", "year": "2020", "author": {"Yulei Sui": "58/10567", "Xiao Cheng": "73/1713", "Guanqin Zhang": "280/5620", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "Code embedding, as an emerging paradigm for source code analysis, has attracted much attention over the past few years. It aims to represent code semantics through distributed vector representations, which can be used to support a variety of program analysis tasks (e.g., code summarization and semantic labeling). However, existing code embedding approaches are intraprocedural, alias-unaware and ignoring the asymmetric transitivity of directed graphs abstracted from source code, thus they are still ineffective in preserving the structural information of code. This paper presents Flow2Vec, a new code embedding approach that precisely preserves interprocedural program dependence (a.k.a value-flows). By approximating the high-order proximity, i.e., the asymmetric transitivity of value-flows, Flow2Vec embeds control-flows and alias-aware data-flows of a program in a low-dimensional vector space. Our value-flow embedding is formulated as matrix multiplication to preserve context-sensitive transitivity through CFL reachability by filtering out infeasible value-flow paths. We have evaluated Flow2Vec using 32 popular open-source projects. Results from our experiments show that Flow2Vec successfully boosts the performance of two recent code embedding approaches codevec and codeseq for two client applications, i.e., code classification and code summarization. For code classification, Flow2Vec improves codevec with an average increase of 21.2%, 20.1% and 20.7% in precision, recall and F1, respectively. For code summarization, Flow2Vec outperforms codeseq by an average of 13.2%, 18.8% and 16.0% in precision, recall and F1, respectively."}, "journals/pomacs/HuangWWTLZLHJ20": {"title": "Understanding (Mis)Behavior on the EOSIO Blockchain.", "url": "https://doi.org/10.1145/3392155", "year": "2020", "author": {"Yuheng Huang 0002": "01/6508-2", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Gareth Tyson": "85/85", "Xiapu Luo": "53/1565", "Run Zhang": "68/4154", "Xuanzhe Liu": "08/2161", "Gang Huang 0001": "11/539-1", "Xuxian Jiang": "80/6988"}, "abstract": "EOSIO has become one of the most popular blockchain platforms since its mainnet launch in June 2018. In contrast to the traditional PoW-based systems (e.g., Bitcoin and Ethereum), which are limited by low throughput, EOSIO is the first high throughput Delegated Proof of Stake system that has been widely adopted by many decentralized applications. Although EOSIO has millions of accounts and billions of transactions, little is known about its ecosystem, especially related to security and fraud. In this paper, we perform a large-scale measurement study of the EOSIO blockchain and its associated DApps. We gather a large-scale dataset of EOSIO and characterize activities including money transfers, account creation and contract invocation. Using our insights, we then develop techniques to automatically detect bots and fraudulent activity. We discover thousands of bot accounts (over 30% of the accounts in the platform) and a number of real-world attacks (301 attack accounts). By the time of our study, 80 attack accounts we identified have been confirmed by DApp teams, causing 828,824 EOS tokens losses (roughly \\$2.6 million) in total."}, "journals/pomacs/GaoWXWZLT20": {"title": "Tracking Counterfeit Cryptocurrency End-to-end.", "url": "https://doi.org/10.1145/3428335", "year": "2020", "author": {"Bingyu Gao": "260/6730", "Haoyu Wang 0001": "50/8499-1", "Pengcheng Xia": "197/8181", "Siwei Wu": "240/8368", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Gareth Tyson": "85/85"}, "abstract": "The production of counterfeit money has a long history. It refers to the creation of imitation currency that is produced without the legal sanction of government. With the growth of the cryptocurrency ecosystem, there is expanding evidence that counterfeit cryptocurrency has also appeared. In this paper, we empirically explore the presence of counterfeit cryptocurrencies on Ethereum and measure their impact. By analyzing over 190K ERC-20 tokens (or cryptocurrencies) on Ethereum, we have identified $2,117$ counterfeit tokens that target 94 of the 100 most popular cryptocurrencies. We perform an end-to-end characterization of the counterfeit token ecosystem, including their popularity, creators and holders, fraudulent behaviors and advertising channels. Through this, we have identified two types of scams related to counterfeit tokens and devised techniques to identify such scams. We observe that over 7,104 victims were deceived in these scams, and the overall financial loss sums to a minimum of \\$ 17 million (74,271.7 ETH). Our findings demonstrate the urgency to identify counterfeit cryptocurrencies and mitigate this threat."}, "journals/corr/abs-2002-01656": {"title": "MadDroid: Characterising and Detecting Devious Ad Content for Android Apps.", "url": "https://arxiv.org/abs/2002.01656", "year": "2020", "author": {"Tianming Liu": "96/5013", "Haoyu Wang 0001": "50/8499-1", "Li Li 0029": "53/2189-29", "Xiapu Luo": "53/1565", "Feng Dong": "62/2555", "Yao Guo 0001": "07/6300-1", "Liu Wang 0002": "10/3099-2", "Tegawendé F. Bissyandé": "00/8006", "Jacques Klein": "k/JacquesKlein"}, "abstract": "\n      Abstract:  Advertisement drives the economy of the mobile app ecosystem. As a key\ncomponent in the mobile ad business model, mobile ad content has been\noverlooked by the research community, which poses a number of threats, e.g.,\npropagating malware and undesirable contents. To understand the practice of\nthese devious ad behaviors, we perform a large-scale study on the app contents\nharvested through automated app testing. In this work, we first provide a\ncomprehensive categorization of devious ad contents, including five kinds of\nbehaviors belonging to two categories: \\emph{ad loading content} and \\emph{ad\nclicking content}. Then, we propose MadDroid, a framework for automated\ndetection of devious ad contents. MadDroid leverages an automated app testing\nframework with a sophisticated ad view exploration strategy for effectively\ncollecting ad-related network traffic and subsequently extracting ad contents.\nWe then integrate dedicated approaches into the framework to identify devious\nad contents. We have applied MadDroid to 40,000 Android apps and found that\nroughly 6\\% of apps deliver devious ad contents, e.g., distributing malicious\napps that cannot be downloaded via traditional app markets. Experiment results\nindicate that devious ad contents are prevalent, suggesting that our community\nshould invest more effort into the detection and mitigation of devious ads\ntowards building a trustworthy mobile advertising ecosystem.\n\n    "}, "journals/corr/abs-2002-05369": {"title": "Characterizing EOSIO Blockchain.", "url": "https://arxiv.org/abs/2002.05369", "year": "2020", "author": {"Yuheng Huang 0002": "01/6508-2", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Gareth Tyson": "85/85", "Xiapu Luo": "53/1565", "Run Zhang": "68/4154", "Xuanzhe Liu": "08/2161", "Gang Huang 0001": "11/539-1", "Xuxian Jiang": "80/6988"}, "abstract": "\n      Abstract:  EOSIO has become one of the most popular blockchain platforms since its\nmainnet launch in June 2018. In contrast to the traditional PoW-based systems\n(e.g., Bitcoin and Ethereum), which are limited by low throughput, EOSIO is the\nfirst high throughput Delegated Proof of Stake system that has been widely\nadopted by many applications. Although EOSIO has millions of accounts and\nbillions of transactions, little is known about its ecosystem, especially\nrelated to security and fraud. In this paper, we perform a large-scale\nmeasurement study of the EOSIO blockchain and its associated DApps. We gather a\nlarge-scale dataset of EOSIO and characterize activities including money\ntransfers, account creation and contract invocation. Using our insights, we\nthen develop techniques to automatically detect bots and fraudulent activity.\nWe discover thousands of bot accounts (over 30\\% of the accounts in the\nplatform) and a number of real-world attacks (301 attack accounts). By the time\nof our study, 80 attack accounts we identified have been confirmed by DApp\nteams, causing 828,824 EOS tokens losses (roughly 2.6 million US\\$) in total.\n\n    "}, "journals/corr/abs-2003-06568": {"title": "Security Analysis of EOSIO Smart Contracts.", "url": "https://arxiv.org/abs/2003.06568", "year": "2020", "author": {"Ningyu He": "228/1460", "Ruiyi Zhang": "08/7975", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Yao Guo 0001": "07/6300-1", "Ting Yu 0001": "y/TingYu-1", "Xuxian Jiang": "80/6988"}, "abstract": "\n      Abstract:  The EOSIO blockchain, one of the representative Delegated Proof-of-Stake\n(DPoS) blockchain platforms, has grown rapidly recently. Meanwhile, a number of\nvulnerabilities and high-profile attacks against top EOSIO DApps and their\nsmart contracts have also been discovered and observed in the wild, resulting\nin serious financial damages. Most of EOSIO's smart contracts are not\nopen-sourced and they are typically compiled to WebAssembly (Wasm) bytecode,\nthus making it challenging to analyze and detect the presence of possible\nvulnerabilities. In this paper, we propose EOSAFE, the first static analysis\nframework that can be used to automatically detect vulnerabilities in EOSIO\nsmart contracts at the bytecode level. Our framework includes a practical\nsymbolic execution engine for Wasm, a customized library emulator for EOSIO\nsmart contracts, and four heuristics-driven detectors to identify the presence\nof four most popular vulnerabilities in EOSIO smart contracts. Experiment\nresults suggest that EOSAFE achieves promising results in detecting\nvulnerabilities, with an F1-measure of 98%. We have applied EOSAFE to all\nactive 53,666 smart contracts in the ecosystem (as of November 15, 2019). Our\nresults show that over 25% of the smart contracts are vulnerable. We further\nanalyze possible exploitation attempts against these vulnerable smart contracts\nand identify 48 in-the-wild attacks (25 of them have been confirmed by DApp\ndevelopers), resulting in financial loss of at least 1.7 million USD.\n\n    "}, "journals/corr/abs-2003-07314": {"title": "Characterizing Cryptocurrency Exchange Scams.", "url": "https://arxiv.org/abs/2003.07314", "year": "2020", "author": {"Pengcheng Xia": "197/8181", "Bowen Zhang": "85/7433", "Ru Ji": "260/7114", "Bingyu Gao": "260/6730", "Lei Wu 0012": "68/5597-12", "Xiapu Luo": "53/1565", "Haoyu Wang 0001": "50/8499-1", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  As the indispensable trading platforms of the ecosystem, hundreds of\ncryptocurrency exchanges are emerging to facilitate the trading of digital\nassets. While, it also attracts the attentions of attackers. A number of scam\nattacks were reported targeting cryptocurrency exchanges, leading to a huge\nmount of financial loss. However, no previous work in our research community\nhas systematically studied this problem. In this paper, we make the first\neffort to identify and characterize the cryptocurrency exchange scams. We first\nidentify over 1,500 scam domains and over 300 fake apps, by collecting existing\nreports and using typosquatting generation techniques. Then we investigate the\nrelationship between them, and identify 94 scam domain families and 30 fake app\nfamilies. We further characterize the impacts of such scams, and reveal that\nthese scams have incurred financial loss of 520k US dollars at least. We\nfurther observe that the fake apps have been sneaked to major app markets\n(including Google Play) to infect unsuspicious users. Our findings demonstrate\nthe urgency to identify and prevent cryptocurrency exchange scams. To\nfacilitate future research, we have publicly released all the identified scam\ndomains and fake apps to the community.\n\n    "}, "journals/corr/abs-2005-00760": {"title": "Understanding Challenges in Deploying Deep Learning Based Software: An Empirical Study.", "url": "https://arxiv.org/abs/2005.00760", "year": "2020", "author": {"Zhenpeng Chen": "200/8104", "Yanbin Cao": "232/2125", "Yuanqiang Liu": "232/2330", "Haoyu Wang 0001": "50/8499-1", "Tao Xie 0001": "x/TaoXie", "Xuanzhe Liu": "08/2161"}, "abstract": "\n      Abstract:  Deep learning (DL) becomes increasingly pervasive, being used in a wide range\nof software applications. These software applications, named as DL based\nsoftware (in short as DL software), integrate DL models trained using a large\ndata corpus with DL programs written based on DL frameworks such as TensorFlow\nand Keras. A DL program encodes the network structure of a desirable DL model\nand the process by which the model is trained using the training data. To help\ndevelopers of DL software meet the new challenges posed by DL, enormous\nresearch efforts in software engineering have been devoted. Existing studies\nfocus on the development of DL software and extensively analyze faults in DL\nprograms. However, the deployment of DL software has not been comprehensively\nstudied. To fill this knowledge gap, this paper presents a comprehensive study\non understanding challenges in deploying DL software. We mine and analyze 3,023\nrelevant posts from Stack Overflow, a popular Q&A website for developers, and\nshow the increasing popularity and high difficulty of DL software deployment\namong developers. We build a taxonomy of specific challenges encountered by\ndevelopers in the process of DL software deployment through manual inspection\nof 769 sampled posts and report a series of actionable implications for\nresearchers, developers, and DL framework vendors.\n\n    "}, "journals/corr/abs-2005-14619": {"title": "Beyond the Virus: A First Look at Coronavirus-themed Mobile Malware.", "url": "https://arxiv.org/abs/2005.14619", "year": "2020", "author": {"Ren He": "40/713", "Haoyu Wang 0001": "50/8499-1", "Pengcheng Xia": "197/8181", "Liu Wang 0002": "10/3099-2", "Yuanchun Li": "87/4523", "Lei Wu 0012": "68/5597-12", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Yao Guo 0001": "07/6300-1", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  As the COVID-19 pandemic emerged in early 2020, a number of malicious actors\nhave started capitalizing the topic. Although a few media reports mentioned the\nexistence of coronavirus-themed mobile malware, the research community lacks\nthe understanding of the landscape of the coronavirus-themed mobile malware. In\nthis paper, we present the first systematic study of coronavirus-themed Android\nmalware. We first make efforts to create a daily growing COVID-19 themed mobile\napp dataset, which contains 4,322 COVID-19 themed apk samples (2,500 unique\napps) and 611 potential malware samples (370 unique malicious apps) by the time\nof mid-November, 2020. We then present an analysis of them from multiple\nperspectives including trends and statistics, installation methods, malicious\nbehaviors and malicious actors behind them. We observe that the COVID-19 themed\napps as well as malicious ones began to flourish almost as soon as the pandemic\nbroke out worldwide. Most malicious apps are camouflaged as benign apps using\nthe same app identifiers (e.g., app name, package name and app icon). Their\nmain purposes are either stealing users' private information or making profit\nby using tricks like phishing and extortion. Furthermore, only a quarter of the\nCOVID-19 malware creators are habitual developers who have been active for a\nlong time, while 75% of them are newcomers in this pandemic. The malicious\ndevelopers are mainly located in US, mostly targeting countries including\nEnglish-speaking countries, China, Arabic countries and Europe. To facilitate\nfuture research, we have publicly released all the well-labelled COVID-19\nthemed apps (and malware) to the research community. Till now, over 30 research\ninstitutes around the world have requested our dataset for COVID-19 themed\nresearch.\n\n    "}, "journals/corr/abs-2006-06419": {"title": "DEPOSafe: Demystifying the Fake Deposit Vulnerability in Ethereum Smart Contracts.", "url": "https://arxiv.org/abs/2006.06419", "year": "2020", "author": {"Ru Ji": "260/7114", "Ningyu He": "228/1460", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1", "Guangdong Bai": "86/9673", "Yao Guo 0001": "07/6300-1"}, "abstract": "\n      Abstract:  Cryptocurrency has seen an explosive growth in recent years, thanks to the\nevolvement of blockchain technology and its economic ecosystem. Besides\nBitcoin, thousands of cryptocurrencies have been distributed on blockchains,\nwhile hundreds of cryptocurrency exchanges are emerging to facilitate the\ntrading of digital assets. At the same time, it also attracts the attentions of\nattackers. Fake deposit, as one of the most representative attacks\n(vulnerabilities) related to exchanges and tokens, has been frequently observed\nin the blockchain ecosystem, causing large financial losses. However, besides a\nfew security reports, our community lacks of the understanding of this\nvulnerability, for example its scale and the impacts. In this paper, we take\nthe first step to demystify the fake deposit vulnerability. Based on the\nessential patterns we have summarized, we implement DEPOSafe, an automated tool\nto detect and verify (exploit) the fake deposit vulnerability in ERC-20 smart\ncontracts. DEPOSafe incorporates several key techniques including symbolic\nexecution based static analysis and behavior modeling based dynamic\nverification. By applying DEPOSafe to 176,000 ERC-20 smart contracts, we have\nidentified over 7,000 vulnerable contracts that may suffer from two types of\nattacks. Our findings demonstrate the urgency to identify and prevent the fake\ndeposit vulnerability.\n\n    "}, "journals/corr/abs-2007-13639": {"title": "Don't Fish in Troubled Waters! Characterizing Coronavirus-themed Cryptocurrency Scams.", "url": "https://arxiv.org/abs/2007.13639", "year": "2020", "author": {"Pengcheng Xia": "197/8181", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Lei Wu 0012": "68/5597-12", "Yajin Zhou": "15/7381", "Guangdong Bai": "86/9673", "Guoai Xu": "76/10013", "Gang Huang 0001": "11/539-1", "Xuanzhe Liu": "08/2161"}, "abstract": "\n      Abstract:  As COVID-19 has been spreading across the world since early 2020, a growing\nnumber of malicious campaigns are capitalizing the topic of COVID-19. COVID-19\nthemed cryptocurrency scams are increasingly popular during the pandemic.\nHowever, these newly emerging scams are poorly understood by our community. In\nthis paper, we present the first measurement study of COVID-19 themed\ncryptocurrency scams. We first create a comprehensive taxonomy of COVID-19\nscams by manually analyzing the existing scams reported by users from online\nresources. Then, we propose a hybrid approach to perform the investigation by:\n1) collecting reported scams in the wild; and 2) detecting undisclosed ones\nbased on information collected from suspicious entities (e.g., domains, tweets,\netc). We have collected 195 confirmed COVID-19 cryptocurrency scams in total,\nincluding 91 token scams, 19 giveaway scams, 9 blackmail scams, 14 crypto\nmalware scams, 9 Ponzi scheme scams, and 53 donation scams. We then identified\nover 200 blockchain addresses associated with these scams, which lead to at\nleast 330K US dollars in losses from 6,329 victims. For each type of scams, we\nfurther investigated the tricks and social engineering techniques they used. To\nfacilitate future research, we have released all the well-labelled scams to the\nresearch community.\n\n    "}, "journals/corr/abs-2008-13768": {"title": "A3Ident: A Two-phased Approach to Identify the Leading Authors of Android Apps.", "url": "https://arxiv.org/abs/2008.13768", "year": "2020", "author": {"Wei Wang": "35/7092", "Guozhu Meng": "134/8681", "Haoyu Wang 0001": "50/8499-1", "Kai Chen 0012": "c/KaiChen12", "Weimin Ge": "43/626", "Xiaohong Li 0001": "08/2489-1"}, "abstract": "\n      Abstract:  Authorship identification is the process of identifying and classifying\nauthors through given codes. Authorship identification can be used in a wide\nrange of software domains, e.g., code authorship disputes, plagiarism\ndetection, exposure of attackers' identity. Besides the inherent challenges\nfrom legacy software development, framework programming and crowdsourcing mode\nin Android raise the difficulties of authorship identification significantly.\nMore specifically, widespread third party libraries and inherited components\n(e.g., classes, methods, and variables) dilute the primary code within the\nentire Android app and blur the boundaries of code written by different\nauthors. However, prior research has not well addressed these challenges.\nTo this end, we design a two-phased approach to attribute the primary code of\nan Android app to the specific developer. In the first phase, we put forward\nthree types of strategies to identify the relationships between Java packages\nin an app, which consist of context, semantic and structural relationships. A\npackage aggregation algorithm is developed to cluster all packages that are of\nhigh probability written by the same authors. In the second phase, we develop\nthree types of features to capture authors' coding habits and code stylometry.\nBased on that, we generate fingerprints for an author from its developed\nAndroid apps and employ several machine learning algorithms for authorship\nclassification. We evaluate our approach in three datasets that contain 15,666\napps from 257 distinct developers and achieve a 92.5% accuracy rate on average.\nAdditionally, we test it on 2,900 obfuscated apps and our approach can classify\napps with an accuracy rate of 80.4%.\n\n    "}, "journals/corr/abs-2010-12218": {"title": "When the Open Source Community Meets COVID-19: Characterizing COVID-19 themed GitHub Repositories.", "url": "https://arxiv.org/abs/2010.12218", "year": "2020", "author": {"Liu Wang 0002": "10/3099-2", "Ruiqing Li": "246/6396", "Jiaxin Zhu": "150/8816", "Guangdong Bai": "86/9673", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "\n      Abstract:  Ever since the beginning of the outbreak of the COVID-19 pandemic,\nresearchers from interdisciplinary domains have worked together to fight\nagainst the crisis. The open source community, plays a vital role in coping\nwith the pandemic which is inherently a collaborative process. Plenty of\nCOVID-19 related datasets, tools, software, deep learning models, are created\nand shared in research communities with great efforts. However, COVID-19 themed\nopen source projects have not been systematically studied, and we are still\nunaware how the open source community helps combat COVID-19 in practice. To\nfill this void, in this paper, we take the first step to study COVID-19 themed\nrepositories in GitHub, one of the most popular collaborative platforms. We\nhave collected over 67K COVID-19 themed GitHub repositories till July 2020. We\nthen characterize them from a number of aspects and classify them into six\ncategories. We further investigate the contribution patterns of the\ncontributors, and development and maintenance patterns of the repositories.\nThis study sheds light on the promising direction of adopting open source\ntechnologies and resources to rapidly tackle the worldwide public health\nemergency in practice, and reveals existing challenges for improvement.\n\n    "}, "journals/corr/abs-2010-12252": {"title": "Towards understanding flash loan and its applications in defi ecosystem.", "url": "https://arxiv.org/abs/2010.12252", "year": "2020", "author": {"Dabao Wang": "273/2939", "Siwei Wu": "240/8368", "Ziling Lin": "257/9175", "Lei Wu 0012": "68/5597-12", "Xingliang Yuan": "21/8884", "Yajin Zhou": "15/7381", "Haoyu Wang 0001": "50/8499-1", "Kui Ren 0001": "20/6179-1"}, "abstract": "\n      Abstract:  Flash Loan, as an emerging service in the decentralized finance ecosystem,\nallows users to request a non-collateral loan. While providing convenience, it\nalso enables attackers to launch malicious operations with a large amount of\nasset that they do not have. Though there exist spot media reports of attacks\nthat leverage Flash Loan, there lacks a comprehensive understanding of existing\nFlash Loan services. In this work, we take the first step to study the Flash\nLoan service provided by three popular platforms. Specifically, we first\nillustrate the interactions between Flash Loan providers and users. Then, we\ndesign three patterns to identify Flash Loan transactions. Based on the\npatterns, 76, 303 transactions are determined. The evaluation results show that\nthe Flash Loan services get more popular over time. At last, we present four\nFlash Loan applications with real-world examples and propose two potential\nresearch directions.\n\n    "}, "journals/corr/abs-2010-16274": {"title": "Towards Understanding and Demystifying Bitcoin Mixing Services.", "url": "https://arxiv.org/abs/2010.16274", "year": "2020", "author": {"Lei Wu 0012": "68/5597-12", "Yufeng Hu": "187/2673", "Yajin Zhou": "15/7381", "Haoyu Wang 0001": "50/8499-1", "Xiapu Luo": "53/1565", "Zhi Wang 0004": "95/6543-4", "Fan Zhang 0010": "21/3626-10", "Kui Ren 0001": "20/6179-1"}, "abstract": "\n      Abstract:  One reason for the popularity of Bitcoin is due to its anonymity. Although\nseveral heuristics have been used to break the anonymity, new approaches are\nproposed to enhance its anonymity at the same time. One of them is the mixing\nservice. Unfortunately, mixing services have been abused to facilitate criminal\nactivities, e.g., money laundering. As such, there is an urgent need to\nsystematically understand Bitcoin mixing services.\nIn this paper, we take the first step to understand state-of-the-art Bitcoin\nmixing services. Specifically, we propose a generic abstraction model for\nmixing services and observe that there are two mixing mechanisms in the wild,\ni.e. {swapping} and {obfuscating}. Based on this model, we conduct a\ntransaction-based analysis and successfully reveal the mixing mechanisms of\nfour representative services. Besides, we propose a method to identify mixing\ntransactions that leverage the obfuscating mechanism. The proposed approach is\nable to identify over $92$\\% of the mixing transactions. Based on identified\ntransactions, we then estimate the profit of mixing services and provide a case\nstudy of tracing the money flow of stolen Bitcoins.\n\n    "}, "journals/corr/abs-2011-02673": {"title": "Tracking Counterfeit Cryptocurrency End-to-end.", "url": "https://arxiv.org/abs/2011.02673", "year": "2020", "author": {"Bingyu Gao": "260/6730", "Haoyu Wang 0001": "50/8499-1", "Pengcheng Xia": "197/8181", "Siwei Wu": "240/8368", "Yajin Zhou": "15/7381", "Xiapu Luo": "53/1565", "Gareth Tyson": "85/85"}, "abstract": "\n      Abstract:  The production of counterfeit money has a long history. It refers to the\ncreation of imitation currency that is produced without the legal sanction of\ngovernment. With the growth of the cryptocurrency ecosystem, there is expanding\nevidence that counterfeit cryptocurrency has also appeared. In this paper, we\nempirically explore the presence of counterfeit cryptocurrencies on Ethereum\nand measure their impact. By analyzing over 190K ERC-20 tokens (or\ncryptocurrencies) on Ethereum, we have identified 2, 117 counterfeit tokens\nthat target 94 of the 100 most popular cryptocurrencies. We perform an\nend-to-end characterization of the counterfeit token ecosystem, including their\npopularity, creators and holders, fraudulent behaviors and advertising\nchannels. Through this, we have identified two types of scams related to\ncounterfeit tokens and devised techniques to identify such scams. We observe\nthat over 7,104 victims were deceived in these scams, and the overall financial\nloss sums to a minimum of $ 17 million (74,271.7 ETH). Our findings demonstrate\nthe urgency to identify counterfeit cryptocurrencies and mitigate this threat.\n\n    "}, "journals/corr/abs-2011-04654": {"title": "Assessing the Feasibility of Web-Request Prediction Models on Mobile Platforms.", "url": "https://arxiv.org/abs/2011.04654", "year": "2020", "author": {"Yixue Zhao": "179/8606", "Siwei Yin": "278/2348", "Adriana Sejfia": "200/2638", "Marcelo Schmitt Laser": "166/4416", "Haoyu Wang 0001": "50/8499-1", "Nenad Medvidovic": "65/1728"}, "abstract": "\n      Abstract:  Prefetching web pages is a well-studied solution to reduce network latency by\npredicting users' future actions based on their past behaviors. However, such\ntechniques are largely unexplored on mobile platforms. Today's privacy\nregulations make it infeasible to explore prefetching with the usual strategy\nof amassing large amounts of data over long periods and constructing\nconventional, \"large\" prediction models. Our work is based on the observation\nthat this may not be necessary: Given previously reported mobile-device usage\ntrends (e.g., repetitive behaviors in brief bursts), we hypothesized that\nprefetching should work effectively with \"small\" models trained on mobile-user\nrequests collected during much shorter time periods. To test this hypothesis,\nwe constructed a framework for automatically assessing prediction models, and\nused it to conduct an extensive empirical study based on over 15 million HTTP\nrequests collected from nearly 11,500 mobile users during a 24-hour period,\nresulting in over 7 million models. Our results demonstrate the feasibility of\nprefetching with small models on mobile platforms, directly motivating future\nwork in this area. We further introduce several strategies for improving\nprediction models while reducing the model size. Finally, our framework\nprovides the foundation for future explorations of effective prediction models\nacross a range of usage scenarios.\n\n    "}, "journals/corr/abs-2012-00992": {"title": "Understanding Characteristics of Commodity Serverless Computing Platforms.", "url": "https://arxiv.org/abs/2012.00992", "year": "2020", "author": {"Jinfeng Wen": "223/1631", "Yi Liu 0014": "97/4626-14", "Zhenpeng Chen": "200/8104", "Yun Ma 0002": "75/7811-2", "Haoyu Wang 0001": "50/8499-1", "Xuanzhe Liu": "08/2161"}, "abstract": "\n      Abstract:  Serverless computing becomes the new trending paradigm in cloud computing,\nallowing developers to focus on the core application logic and rapidly\nprototype applications. Due to the great prospects of serverless computing, in\nrecent years, most major cloud vendors have rolled out their commodity\nserverless computing platforms. However, the characteristics of these platforms\nhave not been systematically studied. To fill this knowledge gap, this paper\npresents a comprehensive study on characterizing mainstream commodity\nserverless computing platforms (i.e., AWS Lambda, Azure Functions, Google Cloud\nFunctions, and Alibaba Cloud Function Compute). First, we qualitatively analyze\nthese platforms from development, deployment, and runtime aspects to form the\ntaxonomy of characteristics. Additionally, we quantitatively evaluate the\nactual performance of different serverless computing platforms through our\ndesigned benchmark platform. Our benchmark platform has two types of\nbenchmarks, i.e., microbenchmarks and macrobenchmarks. Based on the results of\nqualitative and quantitative analyses, we derive a series of findings and\nprovide insightful implications for both developers and cloud vendors.\n\n    "}, "journals/corr/abs-2012-01032": {"title": "VM Matters: A Comparison of WASM VMs and EVMs in the Performance of Blockchain Smart Contracts.", "url": "https://arxiv.org/abs/2012.01032", "year": "2020", "author": {"Shuyu Zheng": "197/8376", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Gang Huang 0001": "11/539-1", "Xuanzhe Liu": "08/2161"}, "abstract": "\n      Abstract:  WebAssemly is an emerging runtime for Web applications and has been supported\nin almost all browsers. Recently, WebAssembly is further regarded to be a the\nnext-generation environment for blockchain applications, and has been adopted\nby Ethereum, namely eWASM, to replace the state-of-the-art EVM. However,\nwhether and how well current eWASM outperforms EVM on blockchain clients is\nstill unknown. This paper conducts the first measurement study, to measure the\nperformance on WASM VM and EVM for executing smart contracts on blockchain. To\nour surprise, the current WASM VM does not perform in expected performance. The\noverhead introduced by WASM is really non-trivial. Our results highlight the\nchallenges when deploying WASM in practice, and provide insightful implications\nfor improvement space.\n\n    "}, "journals/corr/abs-2012-10866": {"title": "Market-level Analysis of Government-backed COVID-19 Contact Tracing Apps.", "url": "https://arxiv.org/abs/2012.10866", "year": "2020", "author": {"Huiyi Wang": "24/4232", "Liu Wang 0002": "10/3099-2", "Haoyu Wang 0001": "50/8499-1"}, "abstract": ""}, "journals/iacr/LiuXSGWXWH20": {"title": "HyperService: Interoperability and Programmability Across Heterogeneous Blockchains.", "url": "https://eprint.iacr.org/2020/578", "year": "2020", "author": {"Zhuotao Liu": "69/11514", "Yangxi Xiang": "247/9496", "Jian Shi": "78/4266", "Peng Gao 0008": "29/5999-8", "Haoyu Wang 0001": "50/8499-1", "Xusheng Xiao": "13/9656", "Bihan Wen": "158/9840", "Yih-Chun Hu": "51/6805"}, "abstract": ""}, "journals/access/XuZSYGLW19": {"title": "AppAuth: Authorship Attribution for Android App Clones.", "url": "https://doi.org/10.1109/ACCESS.2019.2944684", "year": "2019", "author": {"Guoai Xu": "76/10013", "Chengpeng Zhang": "12/10715", "Bowen Sun": "91/6680", "Xinyu Yang": "89/473", "Yanhui Guo": "84/7055", "Chengze Li": "150/8490", "Haoyu Wang 0001": "50/8499-1"}, "abstract": " Abstract:Android app clone detection has been extensively studied in our community, and a number of effective approaches and frameworks were proposed and released. However, there still remains one open challenge that has not been well addressed in previous work, i.e., the authorship attribution for the detected app clones. Although state-of-the-art approaches could accurately identify repackaged apps in one way or another, no convincing method has been proposed to identify the original app and the authentic author from the repackaged app pairs, which greatly limits the usage scenario of app clone detection techniques. For example, app market maintainers have to manually confirm the identified repackaged app pairs, while in most cases, it is challenging for them to make an accurate decision. In this paper, we propose AppAuth, a novel learning-based approach to predict the authorship of app clones. To be specific, for a given Android app clone pair (or a group of repackaged apps identified), AppAuth could accurately infer the original author of the plagiarized apps. Our approach is motivated by the traditional authorship attribution studies on binary files. AppAuth first extracts a number of coding-style-related features from the executable .apk files, and then relies on machine learning techniques to train a classification model. We have conducted extensive experiments to evaluate the effectiveness of AppAuth. The experiment results suggest that we are able to infer the authorship for Android app clones with high precision. Our work is the first one that tackles the problem systematically and we believe our efforts could positively contribute to the research community and boost the research of app repacking detection and authorship attribution studies."}, "journals/jcst/LiBWK19": {"title": "On Identifying and Explaining Similarities in Android Apps.", "url": "https://doi.org/10.1007/s11390-019-1918-8", "year": "2019", "author": {"Li Li 0029": "53/2189-29", "Tegawendé F. Bissyandé": "00/8006", "Haoyu Wang 0001": "50/8499-1", "Jacques Klein": "k/JacquesKlein"}, "abstract": "App updates and repackaging are recurrent in the Android ecosystem, filling markets with similar apps that must be identified. Despite the existence of several approaches to improving the scalability of detecting repackaged/cloned apps, researchers and practitioners are eventually faced with the need for a comprehensive pairwise comparison (or simultaneously multiple app comparisons) to understand and validate the similarities among apps. In this work, we present the design and implementation of our research-based prototype tool called SimiDroid for multi-level similarity comparison of Android apps. SimiDroid is built with the aim to support the comprehension of similarities/changes among app versions and among repackaged apps. In particular, we demonstrate the need and usefulness of such a framework based on different case studies implementing different dissection scenarios for revealing various insights on how repackaged apps are built. We further show that the similarity comparison plugins implemented in SimiDroid yield more accurate results than the state of the art."}, "journals/jss/LiRBWKT19": {"title": "Revisiting the impact of common libraries for android-related investigations.", "url": "https://doi.org/10.1016/j.jss.2019.04.065", "year": "2019", "author": {"Li Li 0029": "53/2189-29", "Timothée Riom": "243/2279", "Tegawendé F. Bissyandé": "00/8006", "Haoyu Wang 0001": "50/8499-1", "Jacques Klein": "k/JacquesKlein", "Yves Le Traon": "95/5206"}, "abstract": "The packaging model of Android apps requires the entire code to be shipped into a single APK file in order to be installed and executed on a device. This model introduces noises to Android app analyses, e.g., detection of repackaged applications, malware classification, as not only the core developer code but also the other assistant code will be visited. Such assistant code is often contributed by common libraries that are used pervasively by all apps.Despite much effort has been put in our community to investigate Android libraries, the momentum of Android research has not yet produced a complete and reliable set of common libraries for supporting thorough analyses of Android apps. In this work, we hence leverage a dataset of about 1.5 million apps from Google Play to identify potential common libraries, including advertisement libraries, and their abstract representations. With several steps of refinements, we finally collect 1113 libraries supporting common functions and 240 libraries for advertisement. For each library, we also collected its various abstract representations that could be leveraged to find new usages, including obfuscated cases.Based on these datasets, we further empirically revisit three popular Android app analyses, namely (1) repackaged app detection, (2) machine learning-based malware detection, and (3) static code analysis, aiming at measuring the impact of common libraries on their analysing performance. Our experimental results demonstrate that common library can indeed impact the performance of Android app analysis approaches. Indeed, common libraries can introduce both false positive and false negative results to repackaged app detection approaches. The existence of common libraries in Android apps may also impact the performance of machine learning-based classifications as well as that of static code analysers. All in all, the aforementioned results suggest that it is essential to harvest a reliable list of common libraries and also important to pay special attention to them when conducting Android-related investigations."}, "journals/corr/abs-1905-00272": {"title": "Characterizing Code Clones in the Ethereum Smart Contract Ecosystem.", "url": "http://arxiv.org/abs/1905.00272", "year": "2019", "author": {"Ningyu He": "228/1460", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1", "Yao Guo 0001": "07/6300-1", "Xuxian Jiang": "80/6988"}, "abstract": "\n      Abstract:  In this paper, we present the first large-scale and systematic study to\ncharacterize the code reuse practice in the Ethereum smart contract ecosystem.\nWe first performed a detailed similarity comparison study on a dataset of 10\nmillion contracts we had harvested, and then we further conducted a qualitative\nanalysis to characterize the diversity of the ecosystem, understand the\ncorrelation between code reuse and vulnerabilities, and detect the plagiarist\nDApps. Our analysis revealed that over 96% of the contracts had duplicates,\nwhile a large number of them were similar, which suggests that the ecosystem is\nhighly homogeneous. Our results also suggested that roughly 9.7% of the similar\ncontract pairs have exactly the same vulnerabilities, which we assume were\nintroduced by code clones. In addition, we identified 41 DApps clusters,\ninvolving 73 plagiarized DApps which had caused huge financial loss to the\noriginal creators, accounting for 1/3 of the original market volume.\n\n    "}, "journals/corr/abs-1906-10362": {"title": "EVulHunter: Detecting Fake Transfer Vulnerabilities for EOSIO's Smart Contracts at Webassembly-level.", "url": "http://arxiv.org/abs/1906.10362", "year": "2019", "author": {"Lijin Quan": "243/5846", "Lei Wu 0012": "68/5597-12", "Haoyu Wang 0001": "50/8499-1"}, "abstract": "\n      Abstract:  As one of the representative Delegated Proof-of-Stake (DPoS) blockchain\nplatforms, EOSIO's ecosystem grows rapidly in recent years. A number of\nvulnerabilities and corresponding attacks of EOSIO's smart contracts have been\ndiscovered and observed in the wild, which caused a large amount of financial\ndamages. However, the majority of EOSIO's smart contracts are not open-sourced.\nAs a result, the WebAssembly code may become the only available object to be\nanalyzed in most cases. Unfortunately, current tools are web-application\noriented and cannot be applied to EOSIO WebAssembly code directly, which makes\nit more difficult to detect vulnerabilities from those smart contracts. In this\npaper, we propose \\toolname, a static analysis tool that can be used to detect\nvulnerabilities from EOSIO WASM code automatically. We focus on one particular\ntype of vulnerabilities named \\textit{fake-transfer}, and the exploitation of\nsuch vulnerabilities has led to millions of dollars in damages. To the best of\nour knowledge, it is the first attempt to build an automatic tool to detect\nvulnerabilities of EOSIO's smart contracts. The experimental results\ndemonstrate that our tool is able to detect fake transfer vulnerabilities\nquickly and precisely. EVulHunter is available on GitHub\\footnote{Tool and\nbenchmarks: this https URL} and YouTube\\footnote{Demo\nvideo: this https URL}.\n\n    "}, "journals/corr/abs-1907-06828": {"title": "Automated Deobfuscation of Android Native Binary Code.", "url": "http://arxiv.org/abs/1907.06828", "year": "2019", "author": {"Zeliang Kan": "224/9517", "Haoyu Wang 0001": "50/8499-1", "Lei Wu 0012": "68/5597-12", "Yao Guo 0001": "07/6300-1", "Daniel Xiapu Luo": "53/1565"}, "abstract": "\n      Abstract:  With the popularity of Android apps, different techniques have been proposed\nto enhance app protection. As an effective approach to prevent reverse\nengineering, obfuscation can be used to serve both benign and malicious\npurposes. In recent years, more and more sensitive logic or data have been\nimplemented as obfuscated native code because of the limitations of Java\nbytecode. As a result, native code obfuscation becomes a great obstacle for\nsecurity analysis to understand the complicated logic. In this paper, we\npropose DiANa, an automated system to facilitate the deobfuscation of native\nbinary code in Android apps. Specifically, given a binary obfuscated by\nObfuscator-LLVM (the most popular native code obfuscator), DiANa is capable of\nrecovering the original Control Flow Graph. To the best of our knowledge, DiANa\nis the first system that aims to tackle the problem of Android native binary\ndeobfuscation. We have applied DiANa in different scenarios, and the\nexperimental results demonstrate the effectiveness of DiANa based on generic\nsimilarity comparison metrics.\n\n    "}, "journals/corr/abs-1908-09343": {"title": "HyperService: Interoperability and Programmability Across Heterogeneous Blockchains.", "url": "http://arxiv.org/abs/1908.09343", "year": "2019", "author": {"Zhuotao Liu": "69/11514", "Yangxi Xiang": "247/9496", "Jian Shi": "78/4266", "Peng Gao 0008": "29/5999-8", "Haoyu Wang 0001": "50/8499-1", "Xusheng Xiao": "13/9656", "Bihan Wen": "158/9840", "Yih-Chun Hu": "51/6805"}, "abstract": "\n      Abstract:  Blockchain interoperability, which allows state transitions across different\nblockchain networks, is critical functionality to facilitate major blockchain\nadoption. Existing interoperability protocols mostly focus on atomic token\nexchange between blockchains. However, as blockchains have been upgraded from\npassive distributed ledgers into programmable state machines (thanks to smart\ncontracts), the scope of blockchain interoperability goes beyond just token\nexchange. In this paper, we present HyperService, the first platform that\ndelivers interoperability and programmability across heterogeneous blockchains.\nHyperService is powered by two innovative designs: (i) a developer-facing\nprogramming framework that allows developers to build cross-chain applications\nin a unified programming model; and (ii) a secure blockchain-facing\ncryptography protocol that provably realizes those applications on blockchains.\nWe implement a prototype of HyperService in about 35,000 lines of code to\ndemonstrate its practicality. Our experiment results show that HyperService\nimposes reasonable latency, in order of seconds, on the end-to-end execution of\ncross-chain applications\n\n    "}, "journals/corr/abs-1807-04901": {"title": "Dating with Scambots: Understanding the Ecosystem of Fraudulent Dating Applications.", "url": "http://arxiv.org/abs/1807.04901", "year": "2018", "author": {"Yangyu Hu": "188/6980", "Haoyu Wang 0001": "50/8499-1", "Yajin Zhou": "15/7381", "Yao Guo 0001": "07/6300-1", "Li Li 0029": "53/2189-29", "Bingxuan Luo": "223/4368", "Fangren Xu": "223/4675"}, "abstract": "\n      Abstract:  In this work, we are focusing on a new and yet uncovered way for malicious\napps to gain profit. They claim to be dating apps. However, their sole purpose\nis to lure users into purchasing premium/VIP services to start conversations\nwith other (likely fake female) accounts in the app. We call these apps as\nfraudulent dating apps. This paper performs a systematic study to understand\nthe whole ecosystem of fraudulent dating apps. Specifically, we have proposed a\nthree-phase method to detect them and subsequently comprehend their\ncharacteristics via analyzing the existing account profiles. Our observation\nreveals that most of the accounts are not managed by real persons, but by\nchatbots based on predefined conversation templates. We also analyze the\nbusiness model of these apps and reveal that multiple parties are actually\ninvolved in the ecosystem, including producers who develop apps, publishers who\npublish apps to gain profit, and the distribution network that is responsible\nfor distributing apps to end users. Finally, we analyze the impact of them to\nusers (i.e., victims) and estimate the overall revenue. Our work is the first\nsystematic study on fraudulent dating apps, and the results demonstrate the\nurge for a solution to protect users.\n\n    "}, "journals/corr/abs-1810-07780": {"title": "Beyond Google Play: A Large-Scale Comparative Study of Chinese Android App Markets.", "url": "http://arxiv.org/abs/1810.07780", "year": "2018", "author": {"Haoyu Wang 0001": "50/8499-1", "Zhe Liu": "70/1220", "Jingyue Liang": "228/7926", "Narseo Vallina-Rodriguez": "50/7563", "Yao Guo 0001": "07/6300-1", "Li Li 0029": "53/2189-29", "Juan Tapiador": "98/3527", "Jingcun Cao": "228/7777", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  China is one of the largest Android markets in the world. As Chinese users\ncannot access Google Play to buy and install Android apps, a number of\nindependent app stores have emerged and compete in the Chinese app market. Some\nof the Chinese app stores are pre-installed vendor-specific app markets (e.g.,\nHuawei, Xiaomi and OPPO), whereas others are maintained by large tech companies\n(e.g., Baidu, Qihoo 360 and Tencent). The nature of these app stores and the\ncontent available through them vary greatly, including their trustworthiness\nand security guarantees.\nAs of today, the research community has not studied the Chinese Android\necosystem in depth. To fill this gap, we present the first large-scale\ncomparative study that covers more than 6 million Android apps downloaded from\n16 Chinese app markets and Google Play. We focus our study on catalog\nsimilarity across app stores, their features, publishing dynamics, and the\nprevalence of various forms of misbehavior (including the presence of fake,\ncloned and malicious apps). Our findings also suggest heterogeneous developer\nbehavior across app stores, in terms of code maintenance, use of third-party\nservices, and so forth. Overall, Chinese app markets perform substantially\nworse when taking active measures to protect mobile users and legit developers\nfrom deceptive and abusive actors, showing a significantly higher prevalence of\nmalware, fake, and cloned apps than Google Play.\n\n    "}, "journals/access/LiWWLYGXG17": {"title": "CRSPR: PageRank for Android Apps.", "url": "https://doi.org/10.1109/ACCESS.2017.2747597", "year": "2017", "author": {"Chengze Li": "150/8490", "Haoyu Wang 0001": "50/8499-1", "Junfeng Wang 0003": "15/885-3", "Qi Li": "181/2688", "Jianbo Yu": "10/6130", "Jingyi Guo": "09/8315", "Guoai Xu": "76/10013", "Yanhui Guo": "84/7055"}, "abstract": " Abstract:With the sharp increase in mobile apps, modular design and functional reuse are commonly adopted. The inter-component communication (ICC) mechanism in Android allows apps to exchange data with other apps and components, resulting in large amounts of security issues, such as component hijacking vulnerabilities, privilege escalation and spoofing attacks. Although ICC has been extensively studied in previous work, none of the previous approaches is practically scalable to simultaneously analyze a large number of Android apps, giving the combinational explosion of possible inter-component (and inter-app) communications. In this paper, we first propose an explorative study to analyze the ICC-based interaction for a large amount of Android apps. Then we propose CRSPR, a PageRank-like topic-aware app ranking approach to highlight influential Android apps for ICC analysis. The experimental results show that CRSPR is better than the basic counting approach as well as the traditional PageRank-based approach, which further demonstrate that CRSPR is useful for highlighting influential Android apps."}, "journals/tois/WangLGAH17": {"title": "Understanding the Purpose of Permission Use in Mobile Apps.", "url": "https://doi.org/10.1145/3086677", "year": "2017", "author": {"Haoyu Wang 0001": "50/8499-1", "Yuanchun Li": "87/4523", "Yao Guo 0001": "07/6300-1", "Yuvraj Agarwal": "84/1053", "Jason I. Hong": "h/JasonIHong"}, "abstract": "Mobile apps frequently request access to sensitive data, such as location and contacts. Understanding the purpose of why sensitive data is accessed could help improve privacy as well as enable new kinds of access control. In this article, we propose a text mining based method to infer the purpose of sensitive data access by Android apps. The key idea we propose is to extract multiple features from app code and then use those features to train a machine learning classifier for purpose inference. We present the design, implementation, and evaluation of two complementary approaches to infer the purpose of permission use, first using purely static analysis, and then using primarily dynamic analysis. We also discuss the pros and cons of both approaches and the trade-offs involved."}, "journals/corr/abs-1709-01213": {"title": "FrauDroid: An Accurate and Scalable Approach to Automated Mobile Ad Fraud Detection.", "url": "http://arxiv.org/abs/1709.01213", "year": "2017", "author": {"Feng Dong": "62/2555", "Haoyu Wang 0001": "50/8499-1", "Yuanchun Li": "87/4523", "Yao Guo 0001": "07/6300-1", "Li Li 0029": "53/2189-29", "Shaodong Zhang": "206/6693", "Guoai Xu": "76/10013"}, "abstract": "\n      Abstract:  Although mobile ad frauds have been widespread, state-of-the-art approaches\nin the literature have mainly focused on detecting the so-called static\nplacement frauds, where only a single UI state is involved and can be\nidentified based on static information such as the size or location of ad\nviews. Other types of fraud exist that involve multiple UI states and are\nperformed dynamically while users interact with the app. Such dynamic\ninteraction frauds, although now widely spread in apps, have not yet been\nexplored nor addressed in the literature. In this work, we investigate a wide\nrange of mobile ad frauds to provide a comprehensive taxonomy to the research\ncommunity. We then propose, FraudDroid, a novel hybrid approach to detect ad\nfrauds in mobile Android apps. FraudDroid analyses apps dynamically to build UI\nstate transition graphs and collects their associated runtime network traffics,\nwhich are then leveraged to check against a set of heuristic-based rules for\nidentifying ad fraudulent behaviours. We show empirically that FraudDroid\ndetects ad frauds with a high precision (93%) and recall (92%). Experimental\nresults further show that FraudDroid is capable of detecting ad frauds across\nthe spectrum of fraud types. By analysing 12,000 ad-supported Android apps,\nFraudDroid identified 335 cases of fraud associated with 20 ad networks that\nare further confirmed to be true positive results and are shared with our\nfellow researchers to promote advanced ad fraud detection\n\n    "}}}