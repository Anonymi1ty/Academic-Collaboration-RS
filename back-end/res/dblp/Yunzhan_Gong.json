{"id": "83/6569", "name": "Yunzhan Gong", "Article": {"conf/ica3pp/SongGJLJ18": {"title": "Nodes Deployment Optimization Algorithm Based on Improved Evidence Theory.", "url": "https://doi.org/10.1007/978-3-030-05234-8_11", "year": "2018", "author": {"Xiaoli Song": "21/1237", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898", "Qiangyi Li": "191/4337", "Hengchang Jing": "191/4128"}, "abstract": "Underwater wireless sensor networks (UWSNs) applications for ocean monitoring, deep sea surveillance, and locating natural resources are gaining popularity. To monitor the underwater environment or any object of interest, these applications are required to deploy underwater connected node sensors for obtaining useful data. For thriving UWSNs, it is essential that an efficient and secure node deployment mechanism is in place. In this article, we are presenting a novel nodes deployment scheme which is based on evidence theory approach and cater-for 3D-UWSNs. This scheme implements sonar probability perception and an enhanced data fusion model to improve prior probability deployment algorithm of D-S evidence theory. The viability of our algorithm is verified by performing multiple simulation experiments. The simulation results reveal that as compared to other schemes, our algorithm deploys fewer nodes with enhanced network judgment criteria and expanded detection capabilities for a relatively large area.KeywordsEvidence theoryNodes deployment algorithmUnderwater wireless sensor networksData fusionCoverage"}, "conf/icse/LinWG18": {"title": "Subsuming mutation operators.", "url": "https://doi.org/10.1145/3183440.3194948", "year": "2018", "author": {"Huan Lin": "45/3289", "Yawen Wang": "11/7449", "Yunzhan Gong": "83/6569"}, "abstract": "\n\t\tThough minimal mutations were widely studied in recent years, the operators that produce these mutants remain largely unknown. This poster develops a coverage-based approach to identify them by defining Subsuming Mutation Operators (SMOs), the operators that cover all subsuming ones with minimal number of mutants. We then performed an empirical study on 61,000 mutants of 14 programs to determine SMOs among Proteum operators and investigate their properties. The results show only 17 of 82 operators are SMOs and they are not equally significant. For example, OLRN produces only 0.5% of subsuming mutants while VDTR accounts for almost 20%. A set of operators that are efficient at producing subsuming mutants are identified in our study and presented in this paper.\n\t"}, "conf/internetware/ZhangYJGWZ15": {"title": "A hybrid static analysis refinement approach within internetware environment.", "url": "https://doi.org/10.1145/2875913.2875928", "year": "2015", "author": {"Dalin Zhang 0003": "98/9560-3", "Gang Yin": "14/3946", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Tianshuang Wu": "04/8230", "Hailong Zhang 0006": "59/2151-6"}, "abstract": "\n\t\tIn this paper, we propose a hybrid refinement approach to improve the accuracy of static analysis. It keeps condition constraints information during forward dataflow analysis and gets the satisfiability of a warning by a constraint solver taking as input such information and path conditions; data regression analysis can remedy the capability of handling loops and library calls of abstract interpretation technique. It has been implemented in our static analysis tool, Defect Testing System (DTS) and deployed on a internetware environment TRUSTIE. Experiment on a large number of C open source projects shows the great improvement this strategy makes.\n\t"}, "conf/icsai/YaoWLG14": {"title": "A method of function modeling in accurate stub generation.", "url": "https://doi.org/10.1109/ICSAI.2014.7009435", "year": "2014", "author": {"Chi Yao": "155/7030", "Yawen Wang": "11/7449", "Feng Li": "92/2954", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:The behavior of a function call statement is decided by its called function, and it is hard to judge the purpose simply from the function call statement. How to simulate the function call is the key part for the accurate symbolic execution. This paper puts forward a path-sensitive function modeling method, in which the definition of stub function is generated according to the calling context. Experiments show that this method is effective and the execution path is consistent with the target path."}, "conf/issre/WangJG14": {"title": "A Memory Model Based on Three-Valued Matrix for Static Defect Detection.", "url": "https://doi.org/10.1109/ISSREW.2014.75", "year": "2014", "author": {"Qian Wang": "75/5723", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:The knowledge of pointer behavior is very important for static analysis tools, especially the ones aiming at detecting C and related programming languages. But due to the usage of structure and the weakly typed feature of C-like programming languages, obtaining such knowledge is not an easy work. In this paper, we present a modeling method based on 3-valued matrix. This model enables us to perform flow-sensitive points-to analysis to obtain the knowledge of pointer behavior. And specially, it relies on offsets instead of access paths to denote disjoint objects in the memory space, thereby addressing the issue mentioned just before. And moreover, the so-called 3-valued matrix is a compact representation of points-to sets. Such a representation is a key part for designating an effective flow-sensitive points-to analysis. We implement a prototype of our method, and give it an evaluation on a set of open source benchmarks. The experimental results prove the effectiveness of our method, and show that it is suitable for exploring large programs with reasonable accuracy."}, "conf/aina/ChenHG13": {"title": "Static Testing as a Service on Cloud.", "url": "https://doi.org/10.1109/WAINA.2013.257", "year": "2013", "author": {"Siqin Chen": "131/8066", "Junfei Huang": "11/9079", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Static testing is a form of software testing where the software needn't be executed and can find valuable software defects in the early stage of software development cycle. In contrast to dynamic testing, static testing performs code walkthrough automatically instead of the traditional manual way. It is primarily syntax checking of the code and this kind of software testing tool can work alone without software deployment under some strict hardware environment, so it's very convenient and hardware-saving. As it might be waste of costs to own various static testing tools and employ large number of technicians trained for using them skillfully, many small or medium sized enterprises may choose a third-party testing group for the whole or most of the testing work and is quite common in industry. Since static testing does little harm to the testing environment in contrast to dynamic testing, it's more convenient and easier to build and maintain a public software testing platform offering static testing service supplied by static testing tool built-in which can have many static testing jobs running at one time for different customers who can make their access via Internet. In this way, customers can cut their cost on software testing and get testing result with high quality. This paper presents a cloud-based platform architecture offering static testing service which can be fetched via popular Internet browsers such as IE and Fire fox. According to the design, customers should compress the software to be tested and then send upload this package to the platform with the help of browsers and then start testing execution step by step through the web page and finally can download testing result from remote server. This architecture now has an implementation in use, which is built on Hadoop and HBase both deployed on cluster of servers whose operation system are Windows, using Mapreduce implementation built-in Hadoop to distribute testing tasks over different servers, and with..."}, "conf/apsec/ZhangJGZ13": {"title": "Diagnosis-Oriented Alarm Correlations.", "url": "https://doi.org/10.1109/APSEC.2013.33", "year": "2013", "author": {"Dalin Zhang 0003": "98/9560-3", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Hailong Zhang 0006": "59/2151-6"}, "abstract": " Abstract:Defect detection generally includes two stages: static analysis and alarm inspection. Helping the user in the alarm inspection task is a major challenge for current static analyzers. A large number of independent alarms are against the understanding and may lead developers and managers to reject the use of static analysis tools due to the overhead of alarm inspection. To help with the inspection tasks, we formally introduce alarm correlations. If the occurrence of one alarm causes another alarm to occur, we say they are correlated. We propose a framework for the investigation of the alarms, so as to help classifying them by their correlations. The underlying algorithms were implemented inside our static analysis tool. We choose one common semantic alarm as case study and proved that our method has the effect of reducing 33.1% of alarm identification. Using correlation information, we are able to automate alarm identification that previously had to be done manually."}, "conf/apsec/WangJG13": {"title": "Null Dereference Detection via a Backward Analysis.", "url": "https://doi.org/10.1109/APSEC.2013.80", "year": "2013", "author": {"Qian Wang": "75/5723", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Null dereferences are commonly occurring bugs in programming languages such as C. In this paper, we present a novel approach that performs a backward dataflow analysis to detect null-dereference bugs. The technical innovation of our approach is that owing to aliasing predicates, it can perform strong updates in the presence of aliasing, thus eliminating false positives. The aliasing predicates are introduced on the premise of a canonical representation for the program being analyzed. Moreover, the other features of our approach also contribute to improve accuracy. We have implemented this approach, and give an evaluation of it on a set of open source benchmarks. The experimental results prove the effectiveness of our approach, and show that it is suitable for exploring large real programs with reasonable accuracy."}, "conf/fskd/ZhangJXZG13": {"title": "Automatically mining similar warnings and warning combinations.", "url": "https://doi.org/10.1109/FSKD.2013.6816300", "year": "2013", "author": {"Dalin Zhang 0003": "98/9560-3", "Dahai Jin": "124/2898", "Ying Xing": "79/5063", "Hailong Zhang 0006": "59/2151-6", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Static analysis tools usually report many warnings. To help with the inspection tasks, we present an approach that uses data mining techniques to work on the results of static analysis of source code to classify similar warnings and warning combinations, and makes the final warning report easier to handle. The underlying algorithms were implemented inside our static analysis tool and used successfully to prioritizing static analysis warnings in large, critical embedded applications."}, "conf/issre/ZhangZJG13": {"title": "Improving the accuracy of static analysis based on state partition.", "url": "https://doi.org/10.1109/ISSREW.2013.6688896", "year": "2013", "author": {"Dalin Zhang 0003": "98/9560-3", "Hailong Zhang 0006": "59/2151-6", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:In order to avoid the path explosion problem in full path-sensitive detection during the process of path-sensitive defect detection, defect states are often merged at merging nodes on control flow graph, but this rough merging strategy may lead to accuracy loss and false positives. In this paper, state partition is proposed to handle the implicit variable relationships on respective paths and to improve the accuracy of detection. We also propose a path merging strategy with state partition to avoid accuracy loss caused by untimely merging of data flow information, and it has been implemented in our static analysis tool, Defect Testing System (DTS). Experiment on a large number of C open source projects shows the great improvement this strategy makes."}, "conf/qsic/DongXJGL13": {"title": "An Approach to Fully Recognizing Addressable Expression.", "url": "https://doi.org/10.1109/QSIC.2013.64", "year": "2013", "author": {"Yukun Dong": "136/4730", "Ying Xing": "79/5063", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Kai Liu": "73/4566"}, "abstract": " Abstract:On account of the complexity of programs, it is a difficult work to recognize all addressable expressions, which is one of the preconditions of sound static analysis. This paper introduces an approach to recognizing all addressable expressions of C program. Firstly, we induce grammar patterns of C addressable expressions, mapping each kind of them to node of abstract syntax tree (AST), providing the corresponding naming rule and type inference rule. Then, we demonstrate an approach that recognizes C addressable expressions based on AST. In order to validate the adequacy of our approach, five real-world programs are utilized to perform experimental analysis. The result shows that our approach could recognize all kinds of addressable expressions."}, "conf/qsic/ZhangZJGW13": {"title": "Automatically Mining High Level Patterns of Software Faults within Methods.", "url": "https://doi.org/10.1109/QSIC.2013.63", "year": "2013", "author": {"Hailong Zhang 0006": "59/2151-6", "Dalin Zhang 0003": "98/9560-3", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Chengcheng Wang": "74/7829"}, "abstract": " Abstract:Software faults are usually correlated to each other in practice. However, pattern-based static analysis can only report independent atomic faults, such as null-pointer dereference and memory leak. It does not take the influences among different faults into account which will lead to omissions of faults and bring security risks. Also, massive independent faults are against the understanding of them that may result in incomplete modifications. In this paper, we propose a new approach to generalize high level patterns with static analysis. Our approach first extracts execution traces of faults and joins the related faults into single compound traces. Then it mines a set of frequent patterns with only compound traces supporting them. The underlying algorithms in our approach have been implemented and applied to our static analysis tool, DTSGCC. The experimental results show the capability of our approach to discover high level patterns of faults."}, "conf/apsec/LiG12": {"title": "Memory Modeling-Based Automatic Test Data Generation for String-Manipulating Programs.", "url": "https://doi.org/10.1109/APSEC.2012.75", "year": "2012", "author": {"Feiyu Li": "127/4014", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:String is a fundamental data type in C programming language, and is accessed through character pointer. Programs that manipulate string variables often use a set of string library functions. When generating test data for a path in a function with string parameters, the string length and each character element of the string must be determined. In this paper, we present an automatic string test data generation method based on memory modeling. We introduce a string abstract memory model, which is used to assist symbolic execution of the tested path. The operation of character pointer pointing to string and the string library functions can be simulated accurately through the operation on the abstract memory model. After symbolic execution of the tested path, we can get path constraints on argument strings in the abstract memory model. The string constraints contain two parts: the constraints on string length and special constrained character's location, and the constraints on each character element of string. We adopt a two-step constraint solving method to solve these constraints to generate the string test data. Experiments on functions from oSIP library and other benchmarks show that our method is feasible."}, "conf/apsec/ZhouJG12": {"title": "An Interval-Based Model for Detecting Software Defect Using Alias Analysis.", "url": "https://doi.org/10.1109/APSEC.2012.14", "year": "2012", "author": {"Hongbo Zhou 0003": "84/4319-3", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Alias analysis is a branch of static program analysis aiming at computing variables which are alias of each other. It is a basis research for many analyses and optimizations in software engineering and compiler construction. Precise modeling of alias analysis is fundamental for software analysis. This paper presents two practical approximation models for representing and computing alias: memory-sensitive model (MSM) and value-sensitive model (VSM). Based on defect-oriented detecting, we present a method to detect software defect using VSM and MSM, which realizes inter-procedure detecting by procedure summary. According to whether type of analysis object coming from defect is value-sensitive or memory-sensitive, we propose two detecting algorithms based on two alias models respectively. One is for memory leak (ML) based on MSM, and the other is for invalid arithmetic operation (IAO) based on VSM. We apply a defect testing system (DTS) to detect six C++ open source projects for proving our models effectiveness. Experimental results show that applying our technique to detect IAO and ML defect can improve detecting efficiency, at the same time reduce potential false positives and false negatives."}, "conf/issre/ZhouWJG12": {"title": "A Static Detecting Model for Invalid Arithmetic Operation Based on Alias Analysis.", "url": "https://doi.org/10.1109/ISSREW.2012.14", "year": "2012", "author": {"Hongbo Zhou 0003": "84/4319-3", "Qian Wang": "75/5723", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Static analysis cannot obtain the values of variables in actual program operation because it does not execute the code itself. It makes the detection of invalid arithmetic operation (IAO) in the field of static analysis difficult to achieve. This paper presents a practical model for IAO detection based on alias analysis. The model uses a triple to record information calculated in dataflow. In the process of dataflow analysis, we consider the alias relation of variables as one of the object of dataflow analysis. Through calculation of the dataflow statement involving alias relation, we can get a more accurate value of the variable. For inter-procedural analysis, we generate a procedure summary to record constraint of IAO. Experimental results show that this method can effectively reduce both false negatives and false positives of IAO, and improve test accuracy."}, "conf/apsec/ZhaoWGCXY11": {"title": "STVL: Improve the Precision of Static Defect Detection with Symbolic Three-Valued Logic.", "url": "https://doi.org/10.1109/APSEC.2011.23", "year": "2011", "author": {"Yunshan Zhao": "99/10598", "Yawen Wang": "11/7449", "Yunzhan Gong": "83/6569", "Honghe Chen": "10/10780", "Qing Xiao": "05/5929", "Zhaohong Yang": "25/7448"}, "abstract": " Abstract:Among various abstract domains, the interval domain is simple but also less precise. To improve the precision of static defect detection based on the interval domain, we propose a symbolic three-valued logic (STVL) based interval analysis. Our STVL differs from other symbolic techniques in that it is capable of handling the logical relationship between variables, which could help eliminating false positives. In addition, for the pointer related defect detection, we introduce a STVL-based pointer model, which naturally supports the pointer arithmetic operation, alias analysis and point-to memory abstraction. Moreover, we present a unified symbolic procedure summary model, also STVL-based, to extract the call effect of each invocation and achieve context-sensitivity. Experimental results indicate that the technique is able to achieve sizable precision improvements at reasonable costs, compared with the none-symbolic method."}, "conf/icse/BaiCMG11": {"title": "Design of intelligent agents for collaborative testing of service-based systems.", "url": "https://doi.org/10.1145/1982595.1982601", "year": "2011", "author": {"Xiaoying Bai": "67/2196", "Bin Chen": "22/5523", "Bo Ma": "26/4179", "Yunzhan Gong": "83/6569"}, "abstract": "\n\t\tTesting on services-based systems faces the challenges of dynamic collaboration. Services are distributed software that can be bound to establish collaborations on-demand. To verify and validate the services, testing needs to react automatically in a coordinated approach. Software agents, which are characterized by persistence, autonomy, social ability and reactivity, are thus introduced to facilitate test deployment, execution, collaboration, and run-time decision making. This paper proposes a design of test agent model, including agents' knowledge, events, actions and interpreter. The knowledge represents the detected environment status, such as test results and changes in services under test. The action models testing behavior such as test configuration, test deployment and test schedule. The Interpreter defines the rules to select actions or parameters on certain events and conditions. In this way, given a set of knowledge at a certain time, a test agent dynamically adjusts its behavior according to its pre-defined rules and strategies. Case studies and experiments are exercised to apply the generic agent design to specific testing tasks such as performance testing and coverage-based testing.\n\t"}, "conf/qsic/ZhaoGLXY11": {"title": "Context-Sensitive Interprocedural Defect Detection Based on a Unified Symbolic Procedure Summary Model.", "url": "https://doi.org/10.1109/QSIC.2011.15", "year": "2011", "author": {"Yunshan Zhao": "99/10598", "Yunzhan Gong": "83/6569", "Li Liu": "33/4528", "Qing Xiao": "05/5929", "Zhaohong Yang": "25/7448"}, "abstract": " Abstract:Precise interprocedural analysis is crucial for defect detection faced with the problem of procedure call. Procedure summary is an effective and classical technique to handle this problem. However, there is no general recipe to construct and instantiate procedure summaries with context-sensitivity. This paper addresses the above challenge by introducing a unified symbolic procedure summary model (PSM), which consists of three aspects: (1) the post-condition briefly records the invocation side effects to calling context, (2) the feature means some inner attributes that might cause both the dataflow and control-flow transformation and (3) the pre-condition implies some potential dataflow safety properties that should not be violated at the call site, or there would exist defects. We represent each aspect of PSM in a three-valued logic: <;Conditional Constraints, Symbolic Expression, Abstract Value>;. Moreover, by comparing the concrete call site context (CSC) with the conditional constraints (CC), we achieve context-sensitivity while instantiating the summary. Furthermore, we proposed a summary transfer function for capturing the nesting call effect of a procedure, which transfers the procedure summary in a bottom-up manner. Algorithms are proposed to construct and instantiate the summary model at concrete call sites with context-sensitivity. Experimental results on 10 open source GCC benchmarks attest to the effectiveness of our technique on detecting null pointer dereference and out of boundary defects."}, "conf/apscc/YangHG10": {"title": "Defect Analysis Respecting Dead Path Elimination in BPEL Process.", "url": "https://doi.org/10.1109/APSCC.2010.24", "year": "2010", "author": {"Xuehong Yang": "44/2563", "Junfei Huang": "11/9079", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:The rise of web services and service composition in recent years makes it necessary to pay special attentions to their robustness and integrity. One of the most ideal solutions is using testing technology, we are interested in checking whether the process satisfies a given temporal safety property, the cost of dynamic testing for distributed and heterogeneous applications is huge, so forward a static analysis technology applied in the BPEL service composition. Defect-based analysis is a suitable technique to measure the adequacy of test results which can detect the defects pulled in by the developers unintentionally. False positive rate and false negative rate are key evaluation criteria of static defect detecting, so in order to improve the accuracy of detection, the algorithm proposed in this paper for defects analysis involving the semantic analysis, i.e., dead path elimination (DPE). By using the abstract domain of variables in the expression of condition on link, we can identify whether it is the start of DPE or not. The whole paper takes the application of uninitialized variable detection to illustrate the effective of this method."}, "conf/euc/WangGCXY08": {"title": "An Application of Interval Analysis in Software Static Analysis.", "url": "https://doi.org/10.1109/EUC.2008.60", "year": "2008", "author": {"Yawen Wang": "11/7449", "Yunzhan Gong": "83/6569", "Junliang Chen": "63/6051", "Qing Xiao": "05/5929", "Zhaohong Yang": "25/7448"}, "abstract": " Abstract:This paper extends the theory of interval arithmetic and applies interval analysis in software static analysis. It defines the concept of interval-set on numeric variables and its operations, introduces the interval computations on Boolean and reference types, and gives the possible value set and necessary value set of a variable in the condition expression. It also presents an approach of static analysis based on interval analysis (SABIA). Our experiment results show that SABIA can directly detect a certain number of infeasible paths in program, and the testing tool DTS_Java based on the approach can eliminate false positives efficiently."}, "conf/scam/YangGQW08": {"title": "DTS - A Software Defects Testing System.", "url": "https://doi.org/10.1109/SCAM.2008.12", "year": "2008", "author": {"Zhaohong Yang": "25/7448", "Yunzhan Gong": "83/6569", "Qing Xiao": "05/5929", "Yawen Wang": "11/7449"}, "abstract": " Abstract:This demo presents DTS (software defects testing system), a tool to catch defects in source code using static testing techniques. In DTS, various defect patterns are defined using defect patterns state machine and tested by a unified testing framework. Since DTS externalizes all the defect patterns it checks, defect patterns can be added, subtracted, or altered without having to modify the tool itself. Moreover, typical interval computation is expanded and applied in DTS to reduce the false positive and compute the state of defect state machine. In order to validate its usefulness, we perform some experiments on a suite of open source software whose results are briefly presented in the last part of the demo."}, "conf/ats/HuangZLG05": {"title": "A State Machine for Detecting C/C++ Memory Faults.", "url": "https://doi.org/10.1109/ATS.2005.15", "year": "2005", "author": {"Guangyan Huang": "00/1198", "Guangmei Zhang": "84/3127", "Xiaowei Li 0001": "37/5372-1", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:Memory faults are major forms of software bugs that severely threaten system availability and security in C/C++ program. Many tools and techniques are available to check memory faults, but few provide systematic full-scale research and quantitative analysis. Furthermore, most of them produce high noise ratio of warning messages that require many human hours to review and eliminate false-positive alarms. And thus, they cannot locate the root causes of memory faults precisely. This paper provides an innovative state machine to check memory faults, which has three main contributions. Firstly, five concise formulas describing memory faults are given to make the mechanism of the state machine simple and flexible. Secondly, the state machine has the ability to locate the cause roots of the memory faults. Finally, a case study applying to an embedded software, which is written in 50 thousand lines of C codes, shows it can provide useful data to evaluate the reliability and quality of software"}, "conf/ats/GongXL03": {"title": "An Expression's Single Fault Model and the Testing Methods.", "url": "https://doi.org/10.1109/ATS.2003.1250793", "year": "2003", "author": {"Yunzhan Gong": "83/6569", "Wanli Xu": "24/6895", "Xiaowei Li 0001": "37/5372-1"}, "abstract": " Abstract:This paper proposes a single fault model for the faults of the expressions, including operator faults (operator reference fault: an operator is replaced by another, extra or missing operator for single operand), incorrect variable or constant, incorrect parentheses. These types of faults often exist in the software, but some fault classes are hard to detect using traditional testing methods. A general testing method is proposed to detect these types of faults. Furthermore the fault simulation method of the faults is presented which can accelerate the generation of test cases and minimize the testing cost greatly. Our empirical results indicate that our methods require a smaller number of test cases than random testing, while retaining fault-detection capabilities that are as good as, or better than the traditional testing methods."}, "conf/ats/JinG03": {"title": "An Object-Oriented Program Automatic Execute Model and the Research of Algorithm.", "url": "https://doi.org/10.1109/ATS.2003.1250867", "year": "2003", "author": {"Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": " Abstract:This paper describes an automatic execution model, which can be used in the automatic test of OO programs. By integrating the object transition diagram, state transition diagram, state transition driver and script chooser, this model can choose and execute script automatically, and whenever it meets any exceptional fault, the result inspector indicates the position of it. By comparing and analyzing several script chooser algorithms, an appropriate one to match this model is designed."}, "journals/comcom/DaiWJGY22": {"title": "An improving approach to analyzing change impact of C programs.", "url": "https://doi.org/10.1016/j.comcom.2021.10.039", "year": "2022", "author": {"Peng Dai": "08/3547", "Yawen Wang": "11/7449", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Wenjin Yang": "62/10863"}, "abstract": "A seemingly small change in the software can usually have a big impact. Impact analysis is an assessment of multiple risks associated with the changes. Research over the past 20 years has shown that impact analysis can decrease the time and effort needed in the development and regression testing and reduce the negative effects of change on other parts of the software system. These researches used program slicing, control flow analysis, call graph to analyze intraprocedural and interprocedural impact. However, most of them only analyze the methods affected by changes of simple variables or statements, which have coarse granularity and can provide limited help. To solve these problems, we propose an improving approach that can analyze the finer granularity change impact of multiple types of variables. This approach first breaks code changes into a combination of basic operations on variables and adopts corresponding analysis mechanisms for different types of variables. The code is preprocessed before analysis to gather essential information such as global variables table, function summaries, and pointer information map. In the intraprocedural analysis, we first divide the variables into two types: definition point and use point. For the use point, a data flow graph is used to analyze its change impact. For the definition point, we first find the paths where it is and analyze the variables on these paths that are controlled by it. In addition, to deal with the change impact of complex variables in the C programs, we have proposed a corresponding analysis procedure and algorithm. In interprocedural analysis, the impacted methods are searched according to their relationship and the global variable information table. A prototype system is developed based on our approach. In our evaluation, we demonstrate that the prototype system can be used to support various software development and maintenance tasks."}, "journals/es/ZhaoW0G22": {"title": "Eliminating the high false-positive rate in defect prediction through BayesNet with adjustable weight.", "url": "https://doi.org/10.1111/exsy.12977", "year": "2022", "author": {"Yanyang Zhao": "78/5804", "Yawen Wang": "11/7449", "Dalin Zhang 0003": "98/9560-3", "Yunzhan Gong": "83/6569"}, "abstract": ""}, "journals/infsof/ZhaoWZZGJ22": {"title": "ST-TLF: Cross-version defect prediction framework based transfer learning.", "url": "https://doi.org/10.1016/j.infsof.2022.106939", "year": "2022", "author": {"Yanyang Zhao": "78/5804", "Yawen Wang": "11/7449", "Yuwei Zhang": "95/8351", "Dalin Zhang 0003": "98/9560-3", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898"}, "abstract": "Context:Cross-version defect prediction (CVDP) is a practical scenario in which defect prediction models are derived from defect data of historical versions to predict potential defects in the current version. Prior research employed defect data of the latest historical version as the training set using the empirical recommended method, ignoring the concept drift between versions, which undermines the accuracy of CVDP.Objective:We customized a Selected Training set and Transfer Learning Framework (ST-TLF) with two objectives: a) to obtain the best training set for the version at hand, proposing an approach to select the training set from the historical data; b) to eliminate the concept drift, designing a transfer strategy for CVDP.Method:To evaluate the performance of ST-TLF, we investigated three research problems, covering the generalization of ST-TLF for multiple classifiers, the accuracy of our training set matching methods, and the performance of ST-TLF in CVDP compared against state-of-the-art approaches.Results:The results reflect that (a) the eight classifiers we examined are all boosted under our ST-TLF, where SVM improves 49.74% considering MCC, as is similar to others; (b) when performing the best training set matching, the accuracy of the method proposed by us is 82.4%, while the experience recommended method is only 41.2%; (c) comparing the 12 control methods, our ST-TLF (with BayesNet), against the best contrast method P15-NB, improves the average MCC by 18.84%.Conclusions:Our framework ST-TLF with various classifiers can work well in CVDP. The training set selection method we proposed can effectively match the best training set for the current version, breaking through the limitation of relying on experience recommendation, which has been ignored in other studies. Also, ST-TLF can efficiently elevate the CVDP performance compared with random forest and 12 control methods."}, "journals/ijes/ZhangGWJ21": {"title": "Mining constant information for readable test data generation.", "url": "https://doi.org/10.1504/IJES.2021.112002", "year": "2021", "author": {"Mingzhe Zhang": "118/5481", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Dahai Jin": "124/2898"}, "abstract": ""}, "journals/ci/SongG20": {"title": "Web service composition on IoT reliability test based on cross entropy.", "url": "https://doi.org/10.1111/coin.12302", "year": "2020", "author": {"Yang Song": "24/4470", "Yunzhan Gong": "83/6569"}, "abstract": ""}, "journals/jss/ZhangJXG20": {"title": "Automated defect identification via path analysis-based features with transfer learning.", "url": "https://doi.org/10.1016/j.jss.2020.110585", "year": "2020", "author": {"Yuwei Zhang": "95/8351", "Dahai Jin": "124/2898", "Ying Xing": "79/5063", "Yunzhan Gong": "83/6569"}, "abstract": "Recently, artificial intelligence techniques have been widely applied to address various specialized tasks in software engineering, such as code generation, defect identification, and bug repair. Despite the diffuse usage of static analysis tools in automatically detecting potential software defects, developers consider the large number of reported alarms and the expensive cost of manual inspection to be a key barrier to using them in practice. To automate the process of defect identification, researchers utilize machine learning algorithms with a set of hand-engineered features to build classification models for identifying alarms as actionable or unactionable. However, traditional features often fail to represent the deep syntactic structure of alarms. To bridge the gap between programs’ syntactic structure and defect identification features, this paper first extracts a set of novel fine-grained features at variable-level, called path-variable characteristic, by applying path analysis techniques in the feature extraction process. We then raise a two-stage transfer learning approach based on our proposed features, called feature ranking-matching based transfer learning, to increase the performance of cross-project defect identification. Our experimental results for eight open-source projects show that the proposed features at variable-level are promising and can yield significant improvement on both within-project and cross-project defect identification."}, "journals/soco/ZhangXGJLL20": {"title": "A variable-level automated defect identification model based on machine learning.", "url": "https://doi.org/10.1007/s00500-019-03942-3", "year": "2020", "author": {"Yuwei Zhang": "95/8351", "Ying Xing": "79/5063", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898", "Honghui Li": "53/7558", "Feng Liu": "77/1318"}, "abstract": "Static analysis tools, automatically detecting potential source code defects at an early phase during the software development process, are diffusely applied in safety-critical software fields. However, alarms reported by the tools need to be inspected manually by developers, which is inevitable and costly, whereas a large proportion of them are found to be false positives. Aiming at automatically classifying the reported alarms into true defects and false positives, we propose a defect identification model based on machine learning. We design a set of novel features at variable level, called variable characteristics, for building the classification model, which is more fine-grained than the existing traditional features. We select 13 base classifiers and two ensemble learning methods for model building based on our proposed approach, and the reported alarms classified as unactionable (false positives) are pruned for the purpose of mitigating the effort of manual inspection. In this paper, we firstly evaluate the approach on four open-source C projects, and the classification results show that the proposed model achieves high performance and reliability in practice. Then, we conduct a baseline experiment to evaluate the effectiveness of our proposed model in contrast to traditional features, indicating that features at variable level improve the performance significantly in defect identification. Additionally, we use machine learning techniques to rank the variable characteristics in order to identify the contribution of each feature to our proposed model."}, "journals/access/LinWGJ19": {"title": "Domain-RIP Analysis: A Technique for Analyzing Mutation Stubbornness.", "url": "https://doi.org/10.1109/ACCESS.2018.2883776", "year": "2019", "author": {"Huan Lin": "45/3289", "Yawen Wang": "11/7449", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898"}, "abstract": " Abstract:Existing mutation techniques generate vast numbers of equivalent and trivial mutants, which do not contribute on the improvement of test quality. One possible solution, as is proposed in this paper, is to measure the difficulty of killing a mutant and choose the stubborn (hard-to-kill) mutants in testing, which can be used to challenge the engineers to design new tests so to enhance the testing effectiveness. This paper introduces the domain-based reachability-infection-propagation analysis (D-RIP), a technique that can rank the mutants according to their difficulty of being revealed and present the reason for mutants being stubborn. More specifically, the D-RIP uses subdomain-based testing method and RIP analytical tool to measure the difficulty degree and decide whether a mutant is stubborn. Furthermore, it generates a report that displays the mutants that are hard-to-kill for a given testing method and presents the reasons to interpret why the test suites fail in detecting these mutants. Using this tool, the engineers are able to choose the useful mutants for improving test quality and obtain the guidance to design tests for detecting the stubborn mutants."}, "journals/access/ZhuJGXZ19": {"title": "Detecting Interprocedural Infeasible Paths Based on Unsatisfiable Path Constraint Patterns.", "url": "https://doi.org/10.1109/ACCESS.2019.2894593", "year": "2019", "author": {"Honglei Zhu": "19/4737", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Ying Xing": "79/5063", "Mingnan Zhou": "174/0153"}, "abstract": " Abstract:The static analysis plays an important role in many software engineering activities. However, the existence of infeasible paths, which causes lower program test coverage and several false positives in the results of the static analysis, has become one of the biggest challenges for the static analysis. In this paper, based on unsatisfiable path constraint patterns, we present a new approach to detect interprocedural infeasible paths. In our approach, we first discover nine unsatisfiable path constraint patterns by mining the common path constraint features of a large number of infeasible paths. Then, we detect the interprocedural infeasible paths; a detected path is deemed to be an interprocedural infeasible path if its simplified constraint conditions match one of the nine unsatisfiable path constraint patterns. To illustrate and verify the approach, an experimental study is performed on five open source C projects. The results show that compared with the existing approach, our approach requires less time on average and detects more interprocedural infeasible paths among the given paths."}, "journals/jcst/ZhangGWJ19": {"title": "Unit Test Data Generation for C Using Rule-Directed Symbolic Execution.", "url": "https://doi.org/10.1007/s11390-019-1935-7", "year": "2019", "author": {"Mingzhe Zhang": "118/5481", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Dahai Jin": "124/2898"}, "abstract": "Unit testing is widely used in software development. One important activity in unit testing is automatic test data generation. Constraint-based test data generation is a technique for automatic generation of test data, which uses symbolic execution to generate constraints. Unit testing only tests functions instead of the whole program, where individual functions typically have preconditions imposed on their inputs. Conventional symbolic execution cannot detect these preconditions, let alone converting these preconditions into constraints. To overcome these limitations, we propose a novel unit test data generation approach using rule-directed symbolic execution for dealing with functions with missing input preconditions. Rule-directed symbolic execution uses predefined rules to detect preconditions in the individual function, and generates constraints for inputs based on preconditions. We introduce implicit constraints to represent preconditions, and unify implicit constraints and program constraints into integrated constraints. Test data generated based on integrated constraints can explore previously unreachable code and help developers find more functional faults and logical faults. We have implemented our approach in a tool called CTS-IC, and applied it to real-world projects. The experimental results show that rule-directed symbolic execution can find preconditions (implicit constraints) automatically from an individual function. Moreover, the unit test data generated by our approach achieves higher coverage than similar tools and efficiently mitigates missing input preconditions problems in unit testing for individual functions."}, "journals/pnc/SongGJL19": {"title": "Nodes deployment optimization algorithm based on improved evidence theory of underwater wireless sensor networks.", "url": "https://doi.org/10.1007/s11107-018-0807-3", "year": "2019", "author": {"Xiaoli Song": "21/1237", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898", "Qiangyi Li": "191/4337"}, "abstract": "Underwater wireless sensor networks (UWSNs) applications for ocean monitoring, deep sea surveillance, and locating natural resources are gaining more and more popularity. To monitor the underwater environment or any object within a certain area of interest, these applications are required to deploy underwater node sensors connected for obtaining useful data. For thriving UWSNs, it is essential that an efficient and secure node deployment mechanism is in place. This paper presents a novel node deployment scheme, which is based on evidence theory approach and caters for 3D USWNs. This scheme implements sonar probability perception and an enhanced data fusion model to improve prior probability deployment algorithm of D–S evidence theory. The viability of our algorithm is verified by performing multiple simulation experiments. The simulation results reveal that our algorithm deploys fewer nodes with enhanced network judgment criteria and expanded detection capabilities for a relatively large coverage area compared to other schemes. In addition, the generated nodes are also less resource intensive, i.e., low-power sensor nodes."}, "journals/entropy/HaoGWTS17": {"title": "Using ", "url": "https://doi.org/10.3390/e19020079", "year": "2017", "author": {"Jianqiang Hao": "196/4771", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Li Tan": "93/6375", "Jianzhi Sun": "21/7765"}, "abstract": ""}, "journals/ijccc/SongGJLJ17": {"title": "Coverage Hole Recovery Algorithm Based on Molecule Model in Heterogeneous WSNs.", "url": "https://doi.org/10.15837/ijccc.2017.4.2896", "year": "2017", "author": {"Xiaoli Song": "21/1237", "Yunzhan Gong": "83/6569", "Dahai Jin": "124/2898", "Qiangyi Li": "191/4337", "Hengchang Jing": "191/4128"}, "abstract": ""}, "journals/ijossp/ZhangGW17": {"title": "Heuristic Guided Selective Path Exploration for Loop Structure in Coverage Testing.", "url": "https://doi.org/10.4018/IJOSSP.2017040104", "year": "2017", "author": {"Xuzhou Zhang": "142/4935", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449"}, "abstract": ""}, "journals/jcst/ZhangGWXZ17": {"title": "Automated String Constraints Solving for Programs Containing String Manipulation Functions.", "url": "https://doi.org/10.1007/s11390-017-1787-y", "year": "2017", "author": {"Xuzhou Zhang": "142/4935", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Ying Xing": "79/5063", "Mingzhe Zhang": "118/5481"}, "abstract": "The ability to solve various constraints is a principal factor of automatic constraint solvers. Most object-oriented languages treat a character string as a primitive data type which is manipulated by string library functions. Most constraint solvers have limitations on their input constraints, such as strong restrictions on the expressiveness of constraints or lack of the ability to solve hybrid constraints. These limitations hinder applying automated constraint solvers on program analysis techniques for programs containing strings and string manipulation functions. We propose an approach to automatically solve program constraints involving strings and string manipulation functions. Based on the character array model, we design a constraint language which contains primitive operations to precisely describe the constraints of commonly used string manipulation functions. The translated string constraints together with numeric constraints are then solved by a two-phase test generation procedure: firstly, a partial solution is obtained to satisfy the arithmetic constraints of the position variables, and the solution is utilized to simplify the string constraints into pure character array constraints; secondly, the pure array constraints are solved by an off-the-shelf array-specific theory based constraint solver. We integrate the approach into an automated testing tool to support the generation of string test cases, and then perform experiments. The results of the experiments prove that the integration of the proposed approach promotes the testing coverage of the existing testing tool, and the integrated tool has an advantage of handling specific string manipulation functions compared with an existing string solver."}, "journals/eaai/XingGWZ15": {"title": "The application of iterative interval arithmetic in path-wise test data generation.", "url": "https://doi.org/10.1016/j.engappai.2015.07.021", "year": "2015", "author": {"Ying Xing": "79/5063", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Xuzhou Zhang": "142/4935"}, "abstract": "Research of path-wise test data generation is crucial and challenging in the area of software testing, which can be formulated as a constraint satisfaction problem. In our previous research, a look-ahead search method has been proposed as the constraint solver for path-wise test data generation. This paper analytically studies interval arithmetic of the search method in detail, which enforces arc consistency, and introduces the iterative operator to improve it, aiming at detecting infeasible paths as well as shortening generation time. Experiments were conducted to compare the iterative operator with the classical look-ahead operator AC-3, and to compare the test data generation method using the iterative operator with some currently existing methods. Experimental results validate the effectiveness and practical deployment of the proposed iterative method, and demonstrate that it is applicable in engineering."}, "journals/ijccc/WangXGZ14": {"title": "Optimized Branch and Bound for Path-wise Test Data Generation.", "url": "https://doi.org/10.15837/ijccc.2014.4.1169", "year": "2014", "author": {"Yawen Wang": "11/7449", "Ying Xing": "79/5063", "Yunzhan Gong": "83/6569", "Xuzhou Zhang": "142/4935"}, "abstract": ""}, "journals/jcp/DongJG14": {"title": "Symbolic Procedure Summary Using Region-based Symbolic Three-valued Logic.", "url": "http://www.jcomputers.us/index.php?m=content&c=index&a=show&catid=110&id=1381", "year": "2014", "author": {"Yukun Dong": "136/4730", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569"}, "abstract": ""}, "journals/jsw/XingHGWZ14": {"title": "An Intelligent Method Based on State Space Search for Automatic Test Case Generation.", "url": "https://doi.org/10.4304/jsw.9.2.358-364", "year": "2014", "author": {"Ying Xing": "79/5063", "Junfei Huang": "11/9079", "Yunzhan Gong": "83/6569", "Yawen Wang": "11/7449", "Xuzhou Zhang": "142/4935"}, "abstract": ""}, "journals/jsw/WangJGZ13": {"title": "Detecting Null-dereference Bugs via a Backward Analysis.", "url": "https://doi.org/10.4304/jsw.8.12.3120-3131", "year": "2013", "author": {"Qian Wang": "75/5723", "Dahai Jin": "124/2898", "Yunzhan Gong": "83/6569", "Hongbo Zhou 0003": "84/4319-3"}, "abstract": ""}, "journals/jcst/GongW93": {"title": "Deductive fault simulation algorithm based on fault collapsing.", "url": "https://doi.org/10.1007/BF02939481", "year": "1993", "author": {"Yunzhan Gong": "83/6569", "Daozheng Wei": "02/9582"}, "abstract": "The true value simulation is necessary in the critical path tracing fault simulation algorithm. The critical and non-critical inputs can he known after the number of controlling and non-controlling inputs and the criticality of output of every gate are determined. Single output region (SOR) is defined for non-critical lines, so many other non-critical lines can be obtained before fault simulation. Then deductive fault simulation algorithm is used to compute the fault list for every possible critical line from bottom to top, which can greatly decrease the length of fault list and simulation time. The cross-section is defined to reduce the storage space. The experimental results are given at the end of the paper."}}}